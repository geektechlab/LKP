What is a Kernel Module
===========================

Traditional way of adding code to the kernel was to recompile the kernel and reboot the system.

Instead of that, Kernel Modules were introduced which are piece of code that can be loaded/inserted and unloaded/removed from the kernel as per the demand/need.

In boot process, base kernel is loaded first and then after the kernel image is loaded successfully it has initialized all the hardware peripherals it will start mounting the root file system and then it will load the kernel modules which are present in lib modules.

Other Names
===============

1. Loadable Kernel Modules (LKM)
2. Modules

Extension: .ko (Kernel Object)

Standard Location for Kernel Modules
====================================

All modules are installed in the /lib/modules/<kernel version> directory of the rootfs by default. 
check all installed kernel modules by:
	ls /lib/modules/`uname -r`/kernel/
Find kernel modules by:
	cd /lib/modules/`uname -r`/kernel/
	find . -name '*.ko'
Find kernel modules count by:
	cd /lib/modules/`uname -r`/kernel/ | find . -name '*.ko' | wc -l

Device Driver vs Kernel Modules
===============================

A kernel module may not be a device driver at all. A driver is like a sub-class of module.

Modules are used for the below:

1. Device Drivers.
2. File System 
3. System Calls
4. Network drivers: Drivers implementing a network protocol (TCP/IP)
5. TTY line disciplines: For terminal devices

Advantages of Kernel Modules
=============================

1. All parts of the base kernel stay loaded all the time. Modules can save you memory, because you have to have them loaded only when you're actually using them ( the base kernel will always be present in the ram in the memory, but with modules we add/remove the code from the base kernel )

2. Users would need to rebuild and reboot the kernel every time they would require a new functionality.

3. A bug in driver which is compiled as a part of kernel will stop system from loading, whereas module allows systems to load. 

4. Faster to maintain and debug

5. Makes it easier to maintain multiple machines on a single kernel base.

Disadvantages of Kernel Modules
===============================

1. Size:  Module management consumes unpageable kernel memory. 
	a basic kernel with a number of modules loaded will consume more memory than an equivalent kernel with the drivers compiled into the kernel image itself. ( if you compare the code will compare suppose you have lot of modules configured in the kernel that will take more pages when compared to the kernel with all the drivers compiled into the kernel image itself so this will be a significant issue with on machines which have limited ram )
	This can be a very significant issue on machines with limited physical memory

2. As the kernel modules are loaded very late in the boot process, hence core functionality has to go in the base kernel (E.g. Memory Management) ( all the kernel code can not be added as a kernel module because the core functionality like memory management cannot be configured as kernel module because the kernel modules as we have discussed they will be loaded late in the boot ) ( once the kernel is completely initialized and it has mounted the root file system then only the kernel can load the kernel modules hence the core functionality cannot be part of the kernel module )

3. Security: If you build your kernel statically and disable Linux's dynamic module loading feature, you prevent run-time modification of the kernel code. ( because kernel Modules allows to run time modify the kernel functionality ) 

Configuration
=================

In order to support modules, the kernel must have been built with the following option enabled:

CONFIG_MODULES=y

we can check it at
	cat /boot/config-`uname -r` | grep CONFIG_MODULES
