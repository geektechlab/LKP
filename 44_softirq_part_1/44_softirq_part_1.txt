Theory0:
Softirqs 
============

Softirqs are bottom halves that run at a high priority but with hardware interrupts enabled

Implementation: kernel/softirq.c

Header File: <linux/softirq.h>

Data structures
---------------

Softirqs are represented by the softirq_action structure.

struct softirq_action
{
        void    (*action)(struct softirq_action *);
};

A 10 entry array of this structure is declared in kernel/softirq.c

static struct softirq_action softirq_vec[NR_SOFTIRQS];

	two for tasklet processing (HI_SOFTIRQ and TASKLET_SOFTIRQ),
	two for send and receive operations in networking (NET_TX_SOFTIRQ and NET_RX_SOFTIRQ),
	two for the block layer (asynchronous request completions),
	two for timers, and 
	one each for the scheduler and 
	read-copy-update processing

From include/linux/interrupt.h
enum
{
        HI_SOFTIRQ=0,
        TIMER_SOFTIRQ,
        NET_TX_SOFTIRQ,
        NET_RX_SOFTIRQ,
        BLOCK_SOFTIRQ,
        IRQ_POLL_SOFTIRQ,
        TASKLET_SOFTIRQ,
        SCHED_SOFTIRQ,
        HRTIMER_SOFTIRQ, /* Unused, but kept as tools rely on the
                            numbering. Sigh! */
        RCU_SOFTIRQ,    /* Preferable RCU should always be the last softirq */
        NR_SOFTIRQS
};

The number of registered softirqs is statically determined and cannot be changed dynamically.

Preeemption
-------------
A softirq never preempts another softirq . The only event that can preempt a softirq is interrupt handler.

Another softirq even the same one can run on another processor.

/proc/softirqs
================

Shows Per CPU statistics

Implementation: fs/proc/softirqs.c

to watch all softirq handling, run [ $ watch -n1 grep RX /proc/softirqs ]

Theory1:
softirq methods
===================

Registering softirq handlers:
-------------------------

Software interrupts must be registered before the kernel can execute them.

open_softirq is used for associating the softirq instance with the corresponding bottom halve routine.

void open_softirq(int nr, void (*action)(struct softirq_action *))
{
        softirq_vec[nr].action = action;
}

It is being called for example from networking subsystem.

net/core/dev.c:
---------------
        open_softirq(NET_TX_SOFTIRQ, net_tx_action);
        open_softirq(NET_RX_SOFTIRQ, net_rx_action);

Execution of softirq:
----------------------

The kernel maintains a per-CPU bitmask indicating which softirqs need processing at any given time
irq_stat[smp_processor_id].__softirq_pending.

Drivers can signal the execution of soft irq handlers using a function raise_softirq().
This function takes the index of the softirq as argument.

void raise_softirq(unsigned int nr)
{
        unsigned long flags;

        local_irq_save(flags);
        raise_softirq_irqoff(nr);
        local_irq_restore(flags);
}

local_irq_save 		--> Disables interrupts on the current processor where code is running
raise_softirq_irqoff 	--> sets the corresponding bit in the local CPUs softirq bitmask to mark the specified softirq as pending
local_irq_restore	--> Enables the interrupts

raise_softirq_irqoff if executed in non-interrupt context, will invoke wakeup_softirqd(), to wake up, if necessary the ksoftirqd kernel thread of that local CPU

What is the benefit of per-CPU Bitmask?
========================================

By using a processors specific bitmap, the kernel ensures that several softIRQs — even identical ones — can be executed on different CPUs at the same time.

Executing Softirqs
=====================

The actual execution of softirqs is managed by do_softirq()

Implementation : kernel/softirq.c

do_softirq() will call __do_softirq(), if any bit in the local softirq bit mask is set.

__do_softirq() then iterates over the softirq bit mask (least signicant bit) and invokes scheduled softirq handlers.

Theory2:
Creating a new softirq
-----------------------

You declare softirqs statically at compile time via an enum in <linux/interrupt.h>.

Creating a new softirq includes adding a new entry to this enum.

The index is used by the kernel as priority.

Softirqs with the lowest numerical priority execute before those with a higher numerical priority

Insert the new entry depending on the priority you want to give it.

---
generally, tasklet should be used instead of creating new softirq. softirq are used only for driver is very high priority and needs to execute botom half on priority. softirq aren't recommended to be created.
---

Registering your handler
------------------------

Soft irq is registered at runtime via open_softirq().

It takes two parameters:

	a) Index
	b) Handler Function.

Raising your softirq
---------------------

To mark it pending, so it is run at the next invocation of do_softirq(), call raise_softirq()

Softirqs are most often raised from within interrupt handlers.

Other Details
-----------------
The softirq handlers run with interrupts enabled and cannot sleep.

While a handler runs, softirqs on the current processor are disabled.

Another processor, can however execute another softirq.

If the same softirq is raised again while it is executing, another processor can run in it simultaneously.

This means that any shared data even global data used only within the soft irq handler needs proper locking.

most softirq handlers resort to per-processor data (data unique to each processor and thus not requiring locking) and other tricks to avoid explicit locking and provide excellent scalability.

----
hard irq run with interrupts disabled, whereas softirqs run with interrupts enabled
