Theory0:
Return Value of Interrupt Handlers:
Interrupt handlers return an irqreturn_t value.

IRQ_NONE            interrupt was not from this device or was not handled
IRQ_HANDLED         interrupt was handled by this device

Theory1:
Interrupt Flags: The third parameter, flags of request_irq can be either zero or a bit mask of one or more flags defined in <linux/interrupt.h>.

IRQF_SHARED informs the kernel that the interrupt can be shared with other devices. If this flag is not set, then if there is already a handler associated with the requested interrupt, the request for interrupt will fail.

request_irq returns -EBUSY which means that the interrupt was already requested by another device driver.

On success it returns 0

Theory2:
Interrupt Flags:
IRQF_TIMER			This flag specifies that this handler processes interrupts for the system timer.
IRQF_PERCPU 		Interrupt is per cpu
IRQF_PROBE_SHARED	set by callers when they expect sharing mismatches to occur

Theory3:
Interrupt Flags:
IRQF NOBALANCING:
	Flag to exclude this interrupt from IRQ balancing. The purpose of IRQ balancing is to distribute hardware interrupts across processors on a multiprocessor system in order to increase performance. Setting this flag forbids to set any CPU affinity for the requested interrupt handler.

Theory4:
/proc/irq: Starting with the 2.4 kernel, Linux has gained the ability to assign certain IRQs to specific processors (or groups of processors). This is known as SMP IRQ affinity. The interrupt affinity value for a particular IRQ number is stored in the associated /proc/irq/IRQ_NUMBER/smp_affinity file, which can be viewed and modified by the root user. The value stored in this file is a hexadecimal bit-mask representing all CPU cores in the system
/proc/irq/irq_number/smp_affinity_list contains cpu list

Example:
$ cat /proc/irq/1/smp_affinity

00000000,00000000,00000000,00000038

This mean keyboard interrupt can occur in CPU 3, 4, 5. Setting this value to 1, as follows, means that only CPU 0 can service this interrupt:

# echo 1 >/proc/irq/1/smp_affinity
# cat /proc/irq/1/smp_affinity
1

Commas can be used to delimit smp_affinity values for discrete 32-bit groups. This is required on systems with more than 32 cores. /proc/irq/default_smp_affinity specifies default affinity mask that applies to all non-active IRQs. Once IRQ is allocated/activated its affinity bitmask will be set to the default mask

Theory5:
How can a device driver know if the interrupt handler was activated by an interrupt generated by the device it manages?
All devices that offer interrupt support have a status register that can be read in the handling routine to see if the interrupt was or was not generated by the device.
Example:  For 8250 serial port, this status register is IIR - Interrupt Information Register

we should not pass null as device id. this, example will fail to reserve device.
