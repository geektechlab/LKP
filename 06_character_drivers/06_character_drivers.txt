In Linux everything is considered to be a file so devices are also considered to be a file. In UNIX, hardware devices are accessed by the user through special device files. These files are grouped into the /dev directory, and system calls open, read, write, close, lseek, mmap etc. are redirected by the operating system to the device driver associated with the physical device. In the UNIX world there are two categories of device files and thus device drivers: character and block. This division is done:
	by the speed,
	volume and
	way of organizing the data to be transferred from the device to the system and vice versa.

In the first category, there are slow devices, which manage a small amount of data, and access to data does not require frequent seek queries. Examples are devices such as keyboard, mouse, serial ports, sound card, joystick. In general, operations with these devices (read, write) are performed sequentially byte by byte.

The second category includes devices where data volume is large, data is organized on blocks, and search is common. Examples of devices that fall into this category are hard drives, cdroms, ram disks, magnetic tape drives. For these devices, reading and writing is done at the data block level. For the two types of device drivers, the Linux kernel offers different APIs. If for character devices system calls go directly to device drivers, in case of block devices, the drivers do not work directly with system calls. In the case of block devices, communication between the user-space and the block device driver is mediated by the file management subsystem and the block device subsystem.

-------
ll /dev
if c at start, it is character device
if d at start, it is directory
if b at start, it is block device
-------

Character Device Driver:
A character device typically transfers data to and from a user application — they behave like pipes or serial ports, instantly reading or writing the byte data in a character-by-character stream.

Command to list all the character device driver:
$ls -l /dev/ | grep "^c"

Command to list all the block device driver:
$ls -l /dev/ | grep "^b"

----
all ttys are serial ports
----
sda are block devices
----

Steps in creating a character driver:
1. Allocate a device number dynamically or statically (dev_t)
2. Initializing the character device with its file operations (struct cdev, struct file_operations)
3. Registering the character device with Linux Kernel (cdev_add)

Theory1:
Connection between the application and the device file is based on the name of the device file.
However the connection between the device file and the device driver is based on the number of the device file, not the name.

A device ID/number consists of two parts
	Major Number : identifies the device type (IDE disk, SCSI disk, serial port, etc.)
	Minor Number : identifies the device (first disk, second serial port, etc.)

Most times, the major identifies the driver, while the minor identifies each physical device served by the driver. Certain major identifiers are statically assigned to devices (in the Documentation/admin-guide/devices.txt file from the kernel sources).

ls -l /dev/ttyS*
crw-rw---- 1 root dialout 4, 64 Apr 12 23:18 /dev/ttyS0
crw-rw---- 1 root dialout 4, 65 Apr 12 23:18 /dev/ttyS1
crw-rw---- 1 root dialout 4, 74 Apr 12 23:18 /dev/ttyS10
crw-rw---- 1 root dialout 4, 75 Apr 12 23:18 /dev/ttyS11
crw-rw---- 1 root dialout 4, 76 Apr 12 23:18 /dev/ttyS12
crw-rw---- 1 root dialout 4, 77 Apr 12 23:18 /dev/ttyS13
crw-rw---- 1 root dialout 4, 78 Apr 12 23:18 /dev/ttyS14
In columns 5 and 6 of the result you can see the major, respectively the minor for each device.

When choosing the identifier for a new device, you can use two methods:
    static (choose a number that does not seem to be used already)
    dynamic (kernel will give you a device number)

Data Type:
A device ID/number is represented using the type dev_t.
12 bit major number + 20 bit Minor number =32 bit dev_t

To obtain the major or minor parts of a dev_t, use:
    MAJOR(dev_t dev);
    MINOR(dev_t dev);

To create a device number from major and minor number:
     MKDEV(int major, int minor);

Header File: linux/kdev_t.h

/proc/devices:
This file displays the various character and block devices currently configured. The output from /proc/devices includes the major number and name of the device

Output is broken into two major sections:
	Character devices and 
	Block devices.

Theory2:
Difference between static and dynamic method of major and minor number allocation:
Static method is only really useful if you know in advance which major number you want to start with. With Static method , you tell the kernel what device numbers you want (the start major/minor number and count) and it either gives them to you or not (depending on availability).

With Dynamic method, you tell the kernel how many device numbers you need (the starting minor number and count) and it will find a starting major number for you, if one is available, of course. Partially to avoid conflict with other device drivers, it’s considered preferable to use the Dynamic method function, which will dynamically allocate the device numbers for you.

Header File: <linux/fs.h>

Theory3:
we can't use same major number and minor number combination which already has been used. But character and block device can have same major and minr number combination because noth device types are different. Try passing same major number which is already used by finding it from [ cat /proc/devices ].

however, we can use same device name.

Theory4:
CHRDEV_MAJOR_MAX is an artificial limit foe maximum major number (chosen to be 511)
file: linux/fs.h

Dynamic Allocation will allocate the major number dynamically to your driver which is available. It is advantageous over static method because conflict will not happen and kernel will allocate available number automatically. Minor number is still at our wish.

suppose if we create duplicate copy of .ko then even we will not be able to load same module again because, name of module will remain same. check it by [ modinfo <name>.ko ]

There are 2 segments for free char majors. First starting point can be any, we don't know but ends at 234. Second segment starts at 511 and grows reverse and ends at 384. Marks the top and bottom of the second segment of free char majors. After these two segments utilized, dynamic allocation will start failing. Those are defined here:
/* fs/char_dev.c */
#define CHRDEV_MAJOR_MAX 512
Check notes if more details are needed.

We can check dynamic allocations live using [ dmesg ] by running as daemon [ & ]. also we can check later using [ cat /proc/devices/

Theory5:
Device file is independent of device driver. We can create device file before creating device driver also. Device file can be created in two ways:
    1. Manual
    2. Automatic

We can create the device file manually by using mknod.
$ mknod -m <permissions> <name> <device type> <major> <minor>
-m <permissions> – optional argument that sets the permission bits of the new device file to permissions
<name> – your device file name that should have full path (/dev/name)
<device type> – Put c or b
	c – Character Device
	b – Block Device
<major> – major number of your device
<minor> – minor number of your driver

Eg. 
$sudo mknod -m 0644 /dev/mydevice c 244 10

Theory6:
Traditionally, device nodes were stored in the /dev directory on Linux systems. There was a node for every possible type of device, regardless of whether it actually existed in the system. The result was that this directory took up a lot of space.

udev introduces a new way of creating device nodes. It compares the information made available by sysfs and creates nodes. udev can be further configured using its configuration files to tune the device file names, their permissions, their types, etc.

So, as far as driver is concerned, the appropriate /sys entries need to be populated using the Linux device model APIs declared in <linux/device.h> and the rest would be handled by udev.

class_create — create a struct class structure
struct class * class_create (struct module *owner,
			     const char *name);
owner	-	pointer to the module that is to “own” this struct class
name	-	pointer to a string for the name of this class.

Header File: <linux/device.h>
This is used to create a struct class pointer that can then be used in calls to class_device_create.
class_destroy — destroys a struct class structure
void class_destroy (struct class *cls);

Now, the name will appear in /sys/class/<name>.

$ udevadm monitor
With this command, you can tap into udev in real time and see what it sees when you plug in different devices.

Theory7:
For better understanding of process, see example 7.

Create a device and register it with sysfs ( creates devnode )
struct device * device_create(struct class *class, struct device *parent, dev_t devt, void *drv_data, const char *fmt, ...);

This function can be used by char device classes. A struct device will be created in sysfs, registered to the specified class.

class 	-->	pointer to the struct class that this device should be registered to (it returns a pointer )
parent  -->	pointer to the parent struct device of this new device, if any
devt    --> 	the dev_t for the char device to be added
fmt	-->     string for the device's name
...	-->	variable arguments

If a pointer to a parent struct device is passed in, the newly created struct device will be a child of that device in sysfs. 

device_destroy — removes a device that was created with device_create
void device_destroy (struct class *class, dev_t devt);
