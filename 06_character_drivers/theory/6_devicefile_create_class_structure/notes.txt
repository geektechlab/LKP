Traditionally, device nodes were stored in the /dev directory on Linux systems.

There was a node for every possible type of device, regardless of whether it actually existed in the system. 

The result was that this directory took up a lot of space

udev introduces a new way of creating device nodes.

It compares the information made available by sysfs and creates nodes.

udev can be further configured using its configuration files to tune the device file names, their permissions, their types, etc.

So, as far as driver is concerned, the appropriate /sys entries need to be populated using the Linux device model APIs declared in <linux/device.h> and the rest would be handled by udev.

class_create — create a struct class structure

struct class * class_create (struct module *owner,
			     const char *name);

owner	-	pointer to the module that is to “own” this struct class
name	-	pointer to a string for the name of this class.

Header File: <linux/device.h>

Description
=================

This is used to create a struct class pointer that can then be used in calls to class_device_create.

class_destroy — destroys a struct class structure

void class_destroy (struct class *cls);

Now, the name will appear in /sys/class/<name>.
