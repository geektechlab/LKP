Theory0:
Command to get the current date/time in Linux?
=================================================

Command: date

Theory1:
How to find out how long your system is up?
============================================

Command : uptime 

$ uptime
 19:33:25 up  2:52,  1 user,  load average: 0.08, 0.05, 0.01

Output Explanation
===================

19:33:25 --- is the current UNIX time

up 2:52 --- how long the system has been running

1 user  --- number of users currently logged in

load average: 0.08, 0.05, 0.01 --- the average CPU load (average number of jobs in your system's run queue)for the 1, 5 and 15 minutes

Interpreting load average
============================

If the averages are 0.0, then your system is idle.

If the 1 minute average is higher than the 5 or 15 minute averages, then load is increasing.

If the 1 minute average is lower than the 5 or 15 minute averages, then load is decreasing.

If they are higher than your CPU count, then you might have a performance problem

/proc/uptime
================

$ cat /proc/uptime 
10354.21 61534.94

10354.21 	-->	Uptime in seconds
61534.94	-->	Total time spent by all processors in idle process

/proc/loadavg
==============

$ cat /proc/loadavg 
0.07 0.02 0.00 1/672 9133

The first three fields in this file are load average figures giving the number of jobs in the run queue (state R) or waiting for disk I/O (state D) averaged over 1, 5, and 15 minutes.

They are the same as the load average numbers given by uptime(1) and other programs.

The fourth field consists of two numbers separated by a slash (/)
The first of these is the number of currently executing kernel scheduling entities (processes, threads)
The value after the slash is the number of kernel scheduling entities that currently exist on the system

The fifth field is the PID of the process that was most recently created on the system.

Theory2:
Epoch Time/Unix Time
=====================

Number of seconds that have elapsed since January 1 1970

Command: date +%s

To get the epoch time from your C Program:
===========================================

#include <time.h>

time_t time(time_t *tloc);

time() returns the time as the number of seconds since the Epoch.

If tloc is non-NULL, the return value is also stored in the memory pointed to by tloc

Return value:
===============
On  success,  the value of time in seconds since the Epoch is returned.

Theory3:
ctime
==========

char *ctime(const time_t *timep);

Header File: #include <time.h>

The ctime() function returns the string representing the localtime based on the argument timer.

Theory4:
gettimeofday()
===============

gettimeofday() returns the current wall clock time and timezone. 

Header File: #include <sys/time.h>

int gettimeofday(struct timeval *tv, struct timezone *tz);

The tv argument is a struct timeval and gives the number of seconds and microseconds since the Epoch

struct timeval {
	time_t      tv_sec;     /* seconds */
	suseconds_t tv_usec;    /* microseconds */
};

The tz argument is a struct timezone.

struct timezone {
	int tz_minuteswest;     /* minutes west of Greenwich */
	int tz_dsttime;         /* type of DST correction */
};

From man gettimeofday

	The use of the timezone structure is obsolete; the tz argument should normally  be  specified  as  NULL.

Theory5:
Can I use gettimeofday() to determine elapsed time?
========================================================

If you want to display the time to a user of your program, you query the time of day.

However, if your program needs to measure elapsed time, you need a timer that will give the right answer even if the user changes the time on the system clock.

What if i change the system date using date command?
======================================================

$ sudo date --set='-1 hour'

To stop ntp service
-------------------------
$sudo systemctl stop systemd-timesyncd.service

To start ntp service
-------------------------
$sudo systemctl start systemd-timesyncd.service

Theory6:
The familiar system clock which tells the time of day is referred to as a real-time clock or a wall-clock.

To safely measure elapsed time in a program, you need a clock that ticks out time continuously, without any jumps when a user sets the system time. 

This kind of clock is called a monotonic clock.

int clock_gettime(clockid_t clk_id, struct timespec *tp);

The above function can be used to retrieve the time from various clocks, including the real-time clock.

clock_gettime vs gettimeofday
================================

1. Higher Precision

	struct timespec {
		time_t   tv_sec;        /* seconds */
		long     tv_nsec;       /* nanoseconds */
	};

2. Ability to request specific clocks.

	The clocks are identified by a clockid_t which is the first parameter of the function. 

For monotonic clock: clk_id = CLOCK_MONOTONIC
