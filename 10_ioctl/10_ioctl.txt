Theory0:
IOCTL is referred as Input and Output Control. Device files are supposed to represent physical devices. Most physical devices are used for output as well as input. We have write and read system calls for input and output. This is not always enough. The major use of this is in case of handling some specific operations of a device for which the kernel does not have a system call by default.

Examples:
1. Ejecting the media from a “cd” drive,
2. change the Baud Rate of Serial port
3. Adjust the Volume
4. Reading or Writing device registers

The system call ioctl() is provided for device-specific custom commands (such as format, reset and shutdown) that are not provided by standard system calls such as read(), write().

int ioctl(int fd, unsigned long request, ...);
Every device can have its own ioctl commands, which can be
	--> read ioctl's (to send information from a process to the kernel)
	--> write ioctl's (to return information to a process)
	--> both or neither

See ioctl_list(2) for a list of  many  of  the  known  ioctl() calls. [ man 2 ioctl_list ], important, open and check it.

Theory1:
On Linux-based systems the size of a block special device can be obtained using the ioctl request BLKGETSIZE ( check in [ man 2 ioctl_list ] ). It returns the device size as a number of 512-byte blocks

Theory2:
BLKGETSIZE ioctl returns unsigned long , it may fail if the size is 2TB or greater. For this reason it is better to use BLKGETSIZE64  which produces a 64-bit result which is the size in bytes. Header File: <linux/fs.h>

Theory3:
The ioctl driver method has a prototype that differs somewhat from the user space version. generally, IOCTL is used for custom commands implemented for a particular given device. unlocked_ioctl is custom command for a character driver, which we implemented. Se how it gets assigned in device_fops. See what values are received in kernel space.

long (*unlocked_ioctl) (struct file *filp, unsigned int cmd, 
                            unsigned long arg);
The filp pointer is the value corresponding to the file descriptor fd passed on by the application and is the same parameters to the open method. The cmd argument ( from user space ) is passed from the user unchanged, and the optional arg argument is passed in the form of an unsigned long

Theory4:
Most ioctl implementations consist of a big switch statement that selects the correct behavior according to the cmd argument.

Theory6:
Programmers much choose a number for the integer command representing each command implemented through ioctl. Normally many programmers choose a set of small numbers starting with 0 or 1 and go up from there. Picking arbitrary number is a bad idea, because:
 - Two device nodes may have the same major number
 - An application could open more than one device and mix up the file descriptors,  thereby sending the right command to the wrong device.
 - Sending wrong ioctl commands can have catastrophic consequences, including damage to hardware.

Example: Program might find itself trying to change the baud rate of non-serial port input stream, such as FIFO or an audio device. also header files provide macros, but do not specify of which type those are. Whether those are char, int etc. To help programmers create unique ioctl command codes, ioctl codes have been divided into four bitfields.

1. type/magic number:
	8 - bit Wide
	Choose one number after looking into  Documentation/ioctl-number.txt and use it throughout the driver
2. number:
	8-bits wide
	sequential number you assign to your command
3. direction:
	Direction of data transfer.
	Possible values:
		_IOC_NONE(NO Data Transfer)
		_IOC_READ 	--> Reading from the device, driver must write into userspace
		_IOC_WRITE
		_IOC_READ|_IOC_WRITE
4. size:
	Size of the user data involved.
	Width depends on the architecture: usually 13 or 14 bits
	You can find its value for your specific architecture in the macro _IOC_SIZEBITS

Header File: <linux/ioctl.h>
This above header file defines macro that help set up the command numbers as follows:
_IO(type, nr) (for a command that has no argument)
_IOR(type, nr, datatype) (for reading data from the driver)
_IOW(type, nr, datatype) (for writing data to the driver)
_IOWR(type, nr, datatype) (for bidirectional data transfer)

Type and number fields are passed as arguments and size field is derived by applying sizeof to the datatype argument.

Theory7:
Macros to decode information from the ioctl command
_IOC_TYPE(cmd) /* gets the magic number of the device this command targets */
_IOC_NR( cmd) /* gets the sequential number of the command within your device */
_IOC_SIZE(cmd) /* gets the size of the data structure */
_IOC_DIR( cmd) /* gets the direction of data transfer,
                                can be one of the following:
                                _IOC_NONE
                                _IOC_READ
                                _IOC_WRITE
                                _IOC_READ | _IOC_WRITE
                                */
Theory9:
As per the POSIX Standard, if an inappropriate ioctl command has  been issued , then -ENOTTY should be returned.

Theory10:
We need to take care of the arg parameter in the ioctl function, because it is a user space ( might be pointing to user space memory ). We can use copy_from_user/copy_to_user to safely copy data from user to kernel and vice versa. These functions are less efficient in case of copying small data items. You can use put_user/get_user for copying 1, 2, 4 or 8 bytes. If you only want to verify the address without transferring data, you can use access_ok.

Header File: <asm/uaccess.h>

int access_ok(int type, void *addr, unsigned long size);
type -> VERIFY_READ/VERIFY_WRITE: depending on action: reading the user space memory or writing it
addr -> user space address
size -> Depends on the ioctl command.

If you need to both read and write, use VERIFY_WRITE, it is a superset of VERIFY_READ
https://lkml.org/lkml/2019/1/4/418

Theory12:
64 bit ioctl will fail for 32 will -ENOTTY. To use older 32 bit ioctl, we can use compact_ioctl instead of unlock_ioctl. compact_ioctl convert to unlock_ioctl arguments.

For generating 32 bit applcation on 64 bit machine need to install when compiling for 32 bit in 64 bit machine.
$ sudo apt-get install g++-multilib
gcc userapp.c -o userapp -m32

Theory15:
Sending a signal from module to process via IOCTL

int send_sig(int signal, struct task_struct *task, int priv);
signal --> Signal to send
task   --> Corresponds to task_struct corresponding to the process
priv   --> 0 for user applications, 1 for kernel

see how pid gets updated.
