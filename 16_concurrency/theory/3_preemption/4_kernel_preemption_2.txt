Kernel Preemption
=================

Case1: 
	While process A executes an exception handler (necessarily in Kernel Mode), a higher priority process B becomes runnable. 
	This could happen, for instance, if an IRQ occurs and the corresponding handler awakens process B.

	As the kernel is preemptive, a forced process switch replaces process A with B.
	The exception handler is left unfinished and will be resumed only when the scheduler selects again process A for execution.

Case2:

	consider a process that executes an exception handler and whose time quantum expires
	As the kernel is preemptive, the process may be replaced immediately;

Motivation for making the kernel preemptive
============================================

reduce the dispatch latency of the User Mode processes:
	 the delay between the time they become runnable and the time they actually begin running.

Processes performing timely scheduled tasks (such as external hardware controllers, environmental monitors, movie players, and so on) really benefit from kernel preemption, because it reduces the risk of being delayed by another process running in Kernel Mode.

----
scheduler itself also is a process. It is scheduled by timer. When timer interrupt fires, in interrupt handler, scheduler gets called usually. Otherwise, by yielding also it can run. So, scheduler will run interrupt context/process context based on invokation path.

at boot u-boot bootloader ( others also can based on design ) might start kernel. Then check [ cat /proc/interrupts ] for timer interrupt.
Bringing Kernel from harddisk to RAM is done by bootloader like U-boot, GRUB ( x86 uses GRUB ). on x86, BIOS also.

the moment kernel starts, it configures timer and then frequently gets updated.
