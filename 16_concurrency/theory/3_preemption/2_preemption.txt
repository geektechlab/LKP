Preeemption in Linux
=====================

User Space
-----------

Under Linux, user-space programs have always been preemptible:  the kernel interrupts user-space programs to switch to other threads, using the regular clock tick.

So, the kernel doesn't wait for user-space programs to explicitly release the processor.
This means that an infinite loop in an user-space program cannot block the system.

Kernel Space
---------------

Until 2.6 kernels, the kernel itself was not preemtible.
	as soon as one thread has entered the kernel, it could not be preempted to execute an other thread.
	The processor could be used to execute another thread 
		when a syscall was terminated, or 
		when the current thread explictly asked the scheduler to run another thread using the schedule()

	This means that an infinite loop in the kernel code blocked the entire system.

However, this absence of preemption in the kernel caused several problems with regard to latency and scalability. 

So, kernel preemption has been introduced in 2.6 kernels, and one can enable or disable it using the CONFIG_PREEMPT option.

If CONFIG_PREEMPT is enabled, then kernel code can be preempted everywhere, except when the code has disabled local interrupts

An infinite loop in the code can no longer block the entire system.

----
my understanding: so there is no relation between user space and kernel space process. Only kernel scheduler selects those and runs on SMP using different CPUs. So, kernel and user processes are just different in process types, nothing else ?
