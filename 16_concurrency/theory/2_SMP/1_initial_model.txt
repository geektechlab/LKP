Multiprocessing systems
===========================

initial approach:
Each CPU has its own OS
=========================

The simplest possible way to organize a multiprocessor operating system:
    statically divide memory into as many partitions as there are CPUs and 
    give each CPU its own private memory and its own private copy of the operating system.
    One obvious optimization is to allow all the CPUs to share the operating system code and make private copies of only the data

    cpu1            cpu2            cpu3           cpu4         Memory               IO
    --------        ---------       ---------      ----------   -----------          ---------
    |Private|       |private|       |Private |     |Private |   |1   |2    |         |        |
    |OS     |       |OS     |       |OS      |     |OS      |   |Data|Data |         |        |
    --------        ---------       ---------       ----------  ---------- |         |        |
      | |             | |             | |             | |       |3   |4    |         |        |
      | |             | |             | |             | |       |Data|Data |         |        |
      | |             | |             | |             | |       -----------|         ----------
      | |             | |             | |             | |       |OS Code   |              | |
      | |             | |             | |             | |       -----------               | |
      | |             | |             | |             | |            | |                  | |
      | |             | |             | |             | |            | |                  | |
    --  --------------  --------------   --------------  ------------  -------------------   -----
                BUS
    -----------------------------------------------------------------------------------------------

Problems with this approach:
---------------------------
1. When a process makes a system call, the system call is caught and handled on its own CPU using the data structures in the operating system's tables. So, one CPU can't handle other's system calls.

2. since each operating system has its own tables, it also has its own set of processes that it schedules by itself. There is no sharing of processes. As a consequence, it can happen that CPU 1 is idle while CPU 2 is loaded with work.

3. no sharing of pages. It can happen that CPU 1 has pages to spare while CPU 2 is paging continuously. There is no way for CPU 2 to borrow some pages from CPU 1 since the memory allocation is fixed.

4. if the operating system maintains a buffer cache of recently used disk blocks, each operating system does this independently of the other ones. Thus it can happen that a certain disk block is present and dirty in multiple buffer caches at the same time, leading to inconsistent results.
