A master-slave multiprocessor model                 
===================================

One copy of OS and its tables are present on CPU1 and not on any of the others.

All system calls are redirected to CPU 1 for processing there. 

CPU 1 may also run user processes if there is CPU time left over.

This model is called master-slave since CPU 1 is the master and all the others are slaves.

    cpu1            cpu2/slave      cpu3/slave      cpu4/slave    Memory              IO
    --------        ---------       ---------       ----------    -----------         ---------
    |Master |       |user   |       |user    |      |user    |    |User      |        |        |
    |runs OS|       |process|       |process |      |process |    |Processes |        |        |
    --------        ---------       ---------       ----------    |          |        |        |
      | |             | |             | |             | |         |          |        |        |
      | |             | |             | |             | |         |          |        |        |
      | |             | |             | |             | |         -----------|        ----------
      | |             | |             | |             | |         |OS Code   |            | |
      | |             | |             | |             | |         -----------             | |
      | |             | |             | |             | |            | |                  | |
      | |             | |             | |             | |            | |                  | |
    --  --------------  --------------   --------------  ------------  -------------------   -----
                BUS
    -----------------------------------------------------------------------------------------------

The master-slave model solves most of the problems of the first model. 

    1. There is a single data structure (e.g., one list or a set of prioritized lists) that keeps track of ready processes.When a CPU goes idle, it asks the operating system for a process to run and it is assigned one.  Thus it can never happen that one CPU is idle while another is overloaded.
    2. Similarly, pages can be allocated among all the processes dynamically and there is only one buffer cache, so inconsistencies never occur.

Problem:

    The problem with this model is that with many CPUs, the master will become a bottleneck. 

    After all, it must handle all system calls from all CPUs. 

    If, say, 10% of all time is spent handling system calls, then 10 CPUs will pretty much saturate the master, and with 20 CPUs it will be completely overloaded.

    Thus this model is simple and workable for small multiprocessors, but for large ones it fails.
