Symmetric Multiprocesors (SMP)
==============================

One copy of the OS  is in memory, but any CPU can run it.

UP: User Process
    cpu1            cpu2            cpu3           cpu4         Memory               IO
    --------        ---------       ---------      ----------   -----------          ---------
    |Shared |       |Shared |       |Shared  |     |Shared  |   |          |         |        |
    |OS/UP  |       |OS/UP  |       |OS/UP   |     |OS/UP   |   |          |         |        |
    --------        ---------       ---------      ----------   |          |         |        |
      | |             | |             | |             | |       |          |         |        |
      | |             | |             | |             | |       |          |         |        |
      | |             | |             | |             | |       -----------|         ----------
      | |             | |             | |             | |       |OS Code   |              | |
      | |             | |             | |             | |       -----------               | |
      | |             | |             | |             | |            | |                  | |
      | |             | |             | |             | |            | |                  | |
    --  --------------  --------------   --------------  ------------  -------------------   -----
                BUS
    -----------------------------------------------------------------------------------------------

Advantage: eliminates the master CPU bottleneck, since there is no master

Problems: Imagine two CPUs simultaneously picking the same process to run or claiming the same free memory page.

The simplest way around these problems is to associate a mutex (i.e., lock) with the operating system, making the whole system one big critical region

    When a CPU wants to run operating system code, it must first acquire the mutex.

    If the mutex is locked, it just waits. 

    In this way, any CPU can run the operating system, but only one at a time. It is called big kernel lock.

With 20 CPUs, there will be long queues of CPUs waiting to get in.

    Fortunately, it is easy to improve. Many parts of the operating system are independent of one another

    For example, there is no problem with one CPU running the scheduler while another CPU is handling a file system call and a third one is processing a page fault.

    This observation leads to splitting the operating system up into independent critical regions that do not interact with one another. Each critical region is protected by its own mutex, so only one CPU at a time can execute it.
