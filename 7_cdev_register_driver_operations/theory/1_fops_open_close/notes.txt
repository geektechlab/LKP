----------
adding __init / __exit attribute to function creates an entry in sections in generated .ko file.
it can be used to create init or exit code.
----------

struct file_operations:
=============================

Defined in : linux/fs.h
Purpose: Holds pointers to functions defined by the driver that performs various operations on the device.

struct file_operations {
    struct module *owner;
    loff_t (*llseek) (struct file *, loff_t, int);
    ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
    ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
    [...]
    long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
    [...]
    int (*open) (struct inode *, struct file *);
    int (*flush) (struct file *, fl_owner_t id);
    int (*release) (struct inode *, struct file *);
    [...]

E.g.
struct file_operations fops =
{
.read = device_read,
.write = device_write,
.open = device_open,
.release = device_release
};

The above fops structure has defined four function pointers : For reading, writing, opening and closing the device file.

It can be noticed that the signature of the function differs from the system call that the user uses. The operating system sits between the user and the device driver to simplify implementation in the device driver.

-------
for example, int (*open) (struct inode *, struct file *); has two arguments. Whereas, open system call has file path, permissions, and file flags. So parameters are different in user space and kernel space. Kernel will translate this parameter using VFS layer and then call kernel open where we register our own open call viz. device_open().
-------

open does not receive the parameter path or the various parameters that control the file opening mode.
Similarly, read, write, release, ioctl, lseek do not receive as a parameter a file descriptor.
Instead, these routines receive as parameters two structures: file and inode.
