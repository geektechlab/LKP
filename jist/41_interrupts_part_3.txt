Theory0:
Why do we need to disable interrupts?
=====================================

Disabling interrupts, you can guarantee that an interrupt handler will not preempt your current code.

Disabling interrupts also disables kernel preemption

Note: Disabling kernel preemption doesnot provide protection from concurrent access from another processor.
Use locks to prevent another processor from accessing shared data simultaneously.

Enable/Disable Interrupt
=========================

Header File: <linux/irqflags.h>

local_irq_disable(); //disable all interrupts on the current processor

local_irq_enable(); //Enables all interrupts on the current processor

On x86, local_irq_disable() is a simple cli, and local_irq_enable() is a simple sti instruction

cli and sti are the assembly calls to clear and set the allow interrupts flag, respectively.

Theory1:
Enabling/Disabling Interrupts
=============================

local_irq_disable() routine is dangerous if some of interrupts were already disabled prior to its invocation.

The corresponding call to local_irq_enable() unconditionally enables interrupts, despite the fact that they were off to begin with.

local_irq_save(flags); saves the interrupt state ( which interrupts were already disabled/enabled ) on flags and disables interrupt on that processor.

local_irq_restore(flags); restores the previous interrupt state and enables interrupt on that processor. 

Theory2:
Disabling a specific interrupt line
===================================

Disabling a specific interrupt line is also called as masking out an interrupt line.

Example: you might want to disable delivery of a deviceâ€™s interrupts before manipulating its state.

void disable_irq(unsigned int irq); //Disables a given interrupt line in interrupt controller.
			            // this disables delivery of the given interrupt to all processors in system

void enable_irq(unsigned int irq); // this enables delivery of the given interrupt to all processors in system

Note: disable_irq does not return until any executing handler completes.
	callers are assured that
		a) new interrupts will not be delivered on the given line,
		b) any already executing handlers have exited

----
there is no API in Linux, to disable all interrupt on all processors in SMP. Only specific interrupt line on specific processor can be disabled.

Theory3:
void disable_irq_nosync(unsigned int irq);
The function disable_irq_nosync() does not wait for current handlers to complete.

void synchronize_irq(unsigned int irq);
The function synchronize_irq() waits for a specific interrupt handler to exit, if it is executing, before returning.

synchronize_irq() spins until no interrupt handler is running for the given IRQ

Theory4:
What happens if i call disable_irq twice and enable_irq once?
=============================================================

Calls to these functions nest

For each call to disable_irq() or disable_irq_nosync() on a given interrupt line, a corresponding call to enable_irq() is required. 

Only on the last call to enable_irq() is the interrupt line actually enabled.

For example, if disable_irq() is called twice, the interrupt line is not actually reenabled until the second call to enable_irq().

Theory5:
What happens if I disable interrupt line shared among multiple interrupt handlers?
==================================================================================

Disabling the line disables interrupt delivery for all devices on the line.

Therefore, drivers for newer devices tend not to use these interfaces.

Because PCI devices have to support interrupt line sharing by specification, they should not use these interfaces at all.

Thus, disable_irq() and friends are found more often in drivers for older legacy devices, such as the PC parallel port.

Theory6:
irqs_disabled()
=================

The macro irqs_disabled(), returns nonzero if the interrupt system on the local processor is disabled.

Header File: <linux/irqflags.h>

Theory7:
Interrupt Context
===================
When executing a interrupt handler, the kernel is in interrupt context

We know process context is the mode of operation the kernel is in while it is executing on behalf of a process.

Eg. Executing a system call.

As interrupt context is not backed with process, you cannot sleep in interrupt context.

If a function sleeps, you cannot use it from your interrupt handler 

Examples: kmalloc with GFP_KERNEL, ssleep.

Theory8:
in_interrupt()
====================

Header File: <linux/preempt.h>

To find out whether you are running in interrupt context or process context

in_interrupt() returns non zero if the kernel is performing any type of interrupt handling.
in_interrupt() returns zero if the kernel is in process context

Theory9:
Can we use current macro inside interrupt handler?
====================================================
It points to the interrupted process

Theory10:
/* if we add delay in interrupt context, it will have to wait. We should not have delay in interrupt */
/* we shoudl not sleep in interrupt context */
