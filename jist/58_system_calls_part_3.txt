Theory0:
Tracing Read System Call
--------------------------

Implemented in fs/read_write.c

SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)

SYSCALL_DEFINEn()
--------------------

SYSCALL_DEFINEn is a family of macros that make it easy to define a system call with N arguments.

n suffix indicates the argument count.

Eg: Use SYSCALL_DEFINE0 when no arguments are needed for system calls
    Use SYSCALL_DEFINE1 when system call has one argument

Definition: <linux/syscalls.h>

The SYSCALL_DEFINEn() macros initially give two distinct chunks of code

    SYSCALL_METADATA(_read, 3, unsigned int, fd, char __user *, buf, size_t, count)
    __SYSCALL_DEFINEx(3, _read, unsigned int, fd, char __user *, buf, size_t, count)
    {

The first part provides metadata about the syscall for tracing purposes
    It's only expanded when CONFIG_FTRACE_SYSCALLS is defined for the kernel build,

The __SYSCALL_DEFINEx() part is more interesting, as it holds the system call implementation.

Theory1:
asmlinkage
---------------

When you compile a program the compiler's optimizer will occasionally put a function's parameters in registers instead of putting them on the program's stack

This optimization works because the compiler is emitting code for both the caller and the callee and so both sides are made aware of this slight-of-hand

This will not work for the kernel. Because kernel is running in different space and already compiled. Whereas, user space will get compiled later at users will.

asmlinkage is #define for some gcc magic that tells the compiler that the function should not expect to find any of its arguments in registers (a common optimization), but only on the CPU's stack

The actual implementation of asmlinkage is architecture-specific

For example, on x86_64 these markers do nothing

on x86_32 asmlinkage expands to extern "C" __attribute__((regparm(0)))

From x86/include/linux/linkage.h file

#ifdef CONFIG_X86_32
#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))
#endif /* CONFIG_X86_32 */

From linux/linkage.h file
#ifdef __cplusplus
#define CPP_ASMLINKAGE extern "C"
#else
#define CPP_ASMLINKAGE
#endif

#ifndef asmlinkage
#define asmlinkage CPP_ASMLINKAGE
#endif

our asmlinkage (3, ret, fd, buf, count); expands to:

    __asm__ __volatile__ ("" : "=r" (ret) : "0" (ret), "m" (fd), "m" (buf), "m" (count));

The gcc docs for the regparm (number) attribute say "On the Intel 386, the regparm attribute causes the compiler to pass arguments number one to number on the stack."

The template is empty, so no actual assembly is inserted, but the presence of the operands prevents the C compiler from doing any unwanted optimizations. In particular, the output operand ret has a constraint that it should be in a register ("=r"), and the other input registers (fd, buf, count) are memory operands ("m").

Theory2:
How come userspace reaches sys_read
--------------------------------------

We know system calls are identified by system call number.

System call table is where mapping between system call number and the entry point of system call is present

System call table for x86_64: arch/x86/entry/syscalls/syscall_64.tbl

Format of this file is as follows:

<number> <abi> <name> <entry point>

number: 	All syscalls are identified by a unique number.
abi:		common, 64, x32
	The "common" indicates that this system call is to be useable in either 32-bit or 64-bit x86 programs
name:		name of the system call
entry point:	the name of the function to call in order to handle the syscall.

Theory3:
Adding a New System Call
==============================

System Call which do not accept any arguments
-------------------------------------------------

1. cd <linux_source>

2. Create a directory named 'my_syscalls' and change the directory to 'my_syscalls'

$ mkdir my_syscalls
$ cd my_syscalls

3. Create a file 'hello.c' using your favourite editor

$ vi hello.c

#include <linux/kernel.h>
#include <linux/syscalls.h>

SYSCALL_DEFINE0(hello) {
    printk("Hello, world!\n");
    return 0;
}

4. Create a 'Makefile' in the 'my_syscalls' directory.

$ vi Makefile

obj-y := hello.o

This is to ensure that the hello.c file is compiled and included in the kernel source code.

5. Add 'my_syscalls' to kernel Makefile

$ cd ..

search for core-y,  youâ€™ll find this line as the second instance of your search:

core-y          += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/

Add 'my_syscalls' here

core-y          += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ my_syscalls

6. Add the new system call to the system call table

$ vi arch/x86/entry/syscalls/syscall_64.tbl

434     common  hello                   __x64_sys_hello

7. Add new system call to the system call header file

vi include/linux/syscalls.h

asmlinkage long sys_hello(void);

8. Compile and Install the kernel

$ make

$ make modules_install

$ make install

Look at system.map and /proc/kallsyms for sys_hello ( sudo cat /proc/kallsyms | grep sys_hello )
