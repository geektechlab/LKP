Theory0:
kworker
-----------

In last sessions, we used system work queues, now we will use our own work queue. kworker processes are kernel worker processes which actually execute work items.

From Documentation/kernel-per-CPU-kthreads.txt,

Naming convention: kworker/%u:%d%s (cpu, id, priority)

Worker threads are also two types:

	CPU Bound  : It is named as kworker/<corenumber>:<id>
	CPU Unbound: It is named as kworker/u<poolnumber>:<id>

$ ps -ef | grep 'kworker'

kworker/2:0H      -->   running on CPU2 and threadID 0 and is high priority bounded

The u designates a special CPU, the unbound cpu, meaning that the kthread is currently unbound
kworker/u257:0-   -->   unbound thread runs on any CPU

Use taskset to find the CPU Affinity
------------------------------------

taskset is used to set or retrieve the CPU affinity of a running process given its PID or to launch a new COMMAND with a given CPU affinity.

$ taskset -p [PID]

To find out what any kworker is doing
-------------------------------------

$ cat /proc/$(pid_of_kworker)/stack

Theory1:
Dedicated Workqueues
-----------------------

Timing of the execution of work items scheduled onto the global workqueue is not predictable.

one long-running work item can always cause indefinite delays for the rest

Alternatively, the workqueue framework allows the allocation of dedicated workqueues

struct workqueue_struct *alloc_workqueue(const char *fmt,
                                         unsigned int flags,
                                         int max_active, ...);

The above function allocates a workqueue.

Parameters:
------------

fmt: printf format for the name of the workqueue
flags: control how work items are assigned execution resources, scheduled and executed.
max_active: This parameter limits the number of work items which can be executed simultaneously from this workqueue on any given CPU.
remaining args: args for @fmt

destroy a workqueue
-------------------

void destroy_workqueue(struct workqueue_struct *wq)

safely terminate a workqueue; all work currently pending will be done first.

Theory2:
WQ_UNBOUND
----------------

Workqueues created with this flag are managed by kworker-pools that are not bound to any specific CPU.

Scheduled work items to this queue can run on any available processor.

Work items in this queue are executed as soon as possible by kworker pools.

Theory3:
/* max active workqueue are 2, so 2 can run parallely */

Theory4:
WQ_HIGHPRI
-------------

This flag is used to mark a workqueue as high priority

Queued to the highpri worker-pool of the target cpu.

Highpri worker-pools are served by worker threads with elevated nice level.

Nice value: 
------------

Nice value ranges from -20 (highest priority level) to 19 (lowest priority level)

Default value is 0.

To check the nice value:

$ ps ax -o pid,ni,cmd

The above command prints pid, nice value and process name
