Theory0:
Kernel Data structures:
Linux Kernel Code provides several data structures:
	Linked lists
	Queues
	Maps
	Binary trees
These generic data structures are provided to encourage code reuse.

Theory1:
Linked list is the simplest and most common data structure in the Linux Kernel. Linked list allows to have variable number of elements called nodes of the list. Elements in Linked List are dynamically created at run time, and they do not necessarily occupy contiguous regions in memory. Therefore elements needs to be linked together. Each element in the list contains a pointer to the next element. As elements are added and removed from the list, the pointer to the next node is simply adjusted.

Types:
1. Singly Linked Lists
2. Doubly Linked Lists
3. Circular Linked Lists

instead of referrig to this course, can we go through justhttps://demystifyingme.wordpress.com/2017/06/10/kernel-data-structures-linkedlist/ ?

Theory2:
Simplest data structure representing a single linked list:
    //An element in a linked list
    struct list_element
    {
        void *data; //the payload
        struct list_element *next;  //pointer to the next element
    };

    -----------------       -----------------       ------------------      ----------------
    |A      |next   |------>|V      |next   |------>|S      |next    |----->|   null       |
    |       |       |       |       |       |       |       |        |      |              |
    -----------------       -----------------       ------------------      ----------------

Doubly Linked List:
    --------    --------------------------       -------------------     ----------
    |null  |<-- |prev   |A       | next   | ---->|prev | V   |  next|--->|null    |
    |      |    |       |        |        |<---- |     |     |      |    |        |
    -------     --------------------------       --------------------    ----------

    //An element in a linked list
    struct list_elememt
    {
        void *data; //the payload
        struct list_element *next;  //pointer to the next element
        struct list_element *prev;  //pointer to the previous element
    };

As the last element in a linked list has no next element, it is set to point to a special value, such as NULL, to indicate it is the last element in the list.

Circular Linked List:
    In circular linked list, last element points to the first element of the node.
                     -----------------------------------
                     |                                 |
                     |                                 v
            --------------------------      ------------------- 
            |prev   |A      | next   | ---->|prev | V   |  next|-----
            |       |       |        |<---- |     |     |      |    |   
            --------------------------      --------------------    |
            ^                                                       |
            |                                                       |
            ---------------------------------------------------------

Moving through linked list - First and last element:
In linked list implementation, the first element is often represented by a special pointer - called the head. Head node provides each access to the "start" of the list. Non-Circular linked list - Last element is marked by its next pointer being NULL. Circular Linked List - Last element is marked by its next pointer pointing to the head element.

Theory3:
struct student
{
	int roll_number;
	char name[20];
	int section;
	int class;
};

To store the following structure in a linked list, you add a next and previous pointer.
struct student
{
	int roll_number;
	char name[20];
	int section;
	int class;
	struct student *next;
	struct student *prev;
};

Drawback of this approach: You need to write code to handle adding / removing / etc elements specifically for that data structure.

Linux Kernel Approach: The Linux kernel approach is different. Instead of turning the structure into a linked list. The Linux approach is to embed a linked list node in the structure.

Header File: #include <linux/list.h>

struct list_head
{
	struct list_head *next;
	struct list_head *prev;
};

'next' pointer points to the next list node. 'prev' pointer points to the previous list node.

Updated structure:
struct student
{
	int roll_number;
	char name[20];
	int section;
	int class;
	struct list_head list;
};

'list.next' in above structure points to the next element
'list.prev' points to the previous element

Theory4:
List Heads: The first thing to do is to create a list head, a start point for the data structure
Header: <linux/list.h>
Two ways:
1. LIST_HEAD(list_start)
    #define LIST_HEAD_INIT(name) { &(name), &(name) }
    #define LIST_HEAD(name) \
        struct list_head name = LIST_HEAD_INIT(name)
    Eg. struct list_head list_start = { &list_start, &list_start };

2. struct list_head list_start;
    INIT_LIST_HEAD(&list_start);
    static inline void INIT_LIST_HEAD(struct list_head *list)
    {
        WRITE_ONCE(list->next, list);
        list->prev = list;
    }
     -------------
     |           |
    -------------------
    |prev   | next    |
    |       |         |------
    -------------------      |
     |                       |
     ------------------------

Theory5:
Kernel provides a family of functions to manipulate linked lists.

To add a node to a linked list:
list_add(struct list_head *new, struct list_head *head);
This function adds the new node to the given list immediately after the head node.
static inline void list_add(struct list_head *new, struct list_head *head)
{
        __list_add(new, head, head->next);
}
static inline void __list_add(struct list_head *new,
                              struct list_head *prev,
                              struct list_head *next)
{
        if (!__list_add_valid(new, prev, next))
                return;

        next->prev = new;
        new->next = next;
        new->prev = prev;
        WRITE_ONCE(prev->next, new);
}
struct mylist
{
    int data;
    struct list_head list;
};
LIST_HEAD(listhead);

struct mylist *node1 = kmalloc(sizeof(struct mylist), GFP_KERNEL);
node1->data = 1;
list_add(&node1->list, &listhead);
                ------------------------------------    
                |                                  |   
                |                --------------    | 
                |                |1            |   |
                V                |             |   |
        -------------------      |-------------|   |
        |prev    | next    |<--- |prev  |next  |   |
   -----|        |         |     |      |      |----
   |    -------------------      -------------
   |        listhead          node1 ^
   |                                |
   ----------------------------------


struct mylist *node2 = kmalloc(sizeof(struct mylist), GFP_KERNEL);
node2->data = 1;
list_add(&node2->list, &listhead);

                -------------------------------------------------------------   
                |                                                           |
                |               --------------       --------------         |
                |               |2            |      |1           |         |
                V               |             |      |            |         |
        -------------------     |-------------|      |-------------         | 
        |prev   | next    |<--->|prev  |next  |<---->|prev  |next |---------
   -----|       |         |     |      |      |      |      |     |
   |    -------------------      -------------        -------------
   |        listhead                  node2          node1 ^
   |                                                       |
   |                                                       |
   ---------------------------------------------------------

This function is good for implementing stacks

Note: the head need not be the nominal head of the list; if you pass a list_head structure that happens to be in the middle of the list somewhere, the new entry goes immediately after it.

Theory6:
To add a node to the end of the linked list:
list_add_tail(struct list_head *new, struct list_head *head);
static inline void __list_add(struct list_head *new,
                              struct list_head *prev,
                              struct list_head *next)
{
        if (!__list_add_valid(new, prev, next))
                return;

        next->prev = new;
        new->next = next;
        new->prev = prev;
        WRITE_ONCE(prev->next, new);
}
static inline void list_add(struct list_head *new, struct list_head *head)
{
        __list_add(new, head, head->next);
}
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
        __list_add(new, head->prev, head);
}
struct mylist
{
        int data;
        struct list_head list;
};
LIST_HEAD(listhead);

struct mylist *node1 = kmalloc(sizeof(struct mylist), GFP_KERNEL);
node1->data = 1;
list_add_tail(&node1->list, &listhead);


               ------------------------------------
                |                                   |
                |               --------------      |
                |               |1            |     |
                V               |             |     |
        -------------------     |-------------|     |
        |prev   | next    |<--- |prev  |next  |     |
   -----|       |         |     |      |      |------
   |    -------------------      -------------
   |        listhead              node1 ^
   |                                    |
   -------------------------------------


struct mylist *node2 = kmalloc(sizeof(struct mylist), GFP_KERNEL);
node2->data = 1;
list_add_tail(&node2->list, &listhead);

                -------------------------------------------------------------
                |                                                           |
                |               --------------       --------------         |
                |               |1            |      |2           |         |
                V               |             |      |            |         |
        -------------------     |-------------|      |-------------         |
        |prev   | next    |<--->|prev  |next  |<---->|prev  |next |---------
   -----|       |         |     |      |      |      |      |     |
   |    -------------------      -------------        -------------
   |        listhead              node1              node2 ^
   |                                                       |
   |                                                       |
   ---------------------------------------------------------

This is good for implementing a queue

theory7:
Accessing the data present in the node: Kernel provides a macro list_entry(), using which we can easily find the parent structure .

/**
 * list_entry - get the struct for this entry
 * @ptr:        the &struct list_head pointer.
 * @type:       the type of the struct this is embedded in.
 * @member:     the name of the list_head within the struct.
 */
#define list_entry(ptr, type, member) \
        container_of(ptr, type, member)
Ex.
struct mylist
{
        int data;
        struct list_head list;
};
LIST_HEAD(listhead);

struct mylist *node1 = kmalloc(sizeof(struct mylist), GFP_KERNEL);
node1->data = 1;
list_add(&node1->list, &listhead);

struct mylist *node = list_entry(&node1->list, struct mylist, list);

Theory8:
Traversal of linked list is easy: one need to only follow the prev and next pointers.

Theory9:
list_for_each:
/**
 * list_for_each        -       iterate over a list
 * @pos:        the &struct list_head to use as a loop cursor.
 * @head:       the head for your list.
 */
#define list_for_each(pos, head) \
        for (pos = (head)->next; pos != (head); pos = pos->next)
This macro takes two parameters: both list_head structures
First: pointer to point to the current entry. it is a temporary variable that you must provide.
second: head node of the list you want to traverse.
struct list_head *p;
list_for_each(p, listhead) {
	//p points to an entry in the list
}

Theory10:
Most kernel code uses the list_for_each_entry() macro to iterate over a linked list. This macro handles the work performed by list_entry(), making list iteration simple.
/**
 * list_for_each_entry  -       iterate over list of given type
 * @pos:        the type * to use as a loop cursor.
 * @head:       the head for your list.
 * @member:     the name of the list_head within the struct.
 */
#define list_for_each_entry(pos, head, member)                          \
        for (pos = list_first_entry(head, typeof(*pos), member);        \
             &pos->member != (head);                                    \
             pos = list_next_entry(pos, member))

Theory11:
The macro list_for_each_entry_reverse() works just like list_for_each_entry() except that it moves through the list in reverse. If you know the item you are searching for is likely behind the node you are starting your search from, you can use this macro.
/**
 * list_for_each_entry_reverse - iterate backwards over list of given type.
 * @pos:        the type * to use as a loop cursor.
 * @head:       the head for your list.
 * @member:     the name of the list_head within the struct.
 */
#define list_for_each_entry_reverse(pos, head, member)                  \
        for (pos = list_last_entry(head, typeof(*pos), member);         \
             &pos->member != (head);                                    \
             pos = list_prev_entry(pos, member))

Theory12:
To delete a node from a linked list, use list_del.
static inline void list_del(struct list_head *entry)
{
        __list_del_entry(entry);
        entry->next = LIST_POISON1;
        entry->prev = LIST_POISON2;
}
Note: This does not free any memory; this function merely removes the element from the list.
After calling this, you would typically destroy your data structure.

Theory13:
To delete a node from a linked list and reinitialize it, the kernel provides list_del_init():
list_del_init(struct list_head *entry);
Use this function, when you want to reuse the data structure itself.

Theory14:
Iterating while removing:
The standard list iteration methods are not appropriate if you are removing entries from the list. The standard methods rely on the fact that the list entries are not changing out from under them, and thus if the current entry is removed in the body of the loop, the subsequent iteration cannot advance to the next(or previous) pointer. The linux kernel provides a routine to handle this situation for you:

list_for_each_entry_safe(pos, next, head, member)

Additionally, you provide next pointer, which is of the same type as pos. The next pointer is used by the list_for_each_entry_safe() macro to store the next entry in the list, making it safe to remove the current entry.
/**
 * list_for_each_safe - iterate over a list safe against removal of list entry
 * @pos:        the &struct list_head to use as a loop cursor.
 * @n:          another &struct list_head to use as temporary storage
 * @head:       the head for your list.
 */
#define list_for_each_safe(pos, n, head) \
        for (pos = (head)->next, n = pos->next; pos != (head); \
                pos = n, n = pos->next)

Theory15:
Moving Linked List Nodes:
To move a node from one list to another.
list_move(struct list_head *list, struct list_head *head);
This function removes the list entry from its linked list and adds it to the give list after the head element.

Theory16:
Check whether a list is empty or not:
list_empty(struct list_head *head);
This returns nonzero if the given list is empty; otherwise it returns zero

Theory17:
Splicing/Joining/connecting Linked lists:
To splice two unconnected lists together.
list_splice(struct list_head *list, struct list_head *head);

This function splices together two lists by inserting the list pointed to by 'list' to the given list after the element 'head'. To splice two unconnected lists together and reinitialize the old list.

list_splice_init(struct list_head *list, struct list_head);
This function works the same as list_splice(), except that the emptied list pointed to by 'list' is reinitialized

Theory18:
All modules loaded on the system are linked in a list that can be accessed from any module
struct module {
      ....
     struct list_head list;
     ....
     char name[MODULE_NAME_LEN];
     ....
     unsigned int taints;
     ....
};
