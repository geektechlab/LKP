Theory1:
If you want to support multiple kernel versions, you'll find yourself having to code conditional compilation directives. The way to do this to compare the macro LINUX_VERSION_CODE to the macro KERNEL_VERSION.

LINUX_VERSION_CODE:This macro expands to the binary representation of the  kernel version.
One byte for each part of the version release number.
Eg. 5.0.0 = 0x050000 = 327680

Header File: <linux/version.h>
From Kernel Top Level Makefile
LINUX_VERSION_CODE = $(VERSION) * 65536 + $(PATCHLEVEL) * 256 + $(SUBLEVEL)
Eg: 5.0.0 = 5*65536+0*256+0 = 327680

If you want to stop compilation at preprocessing stage.

Add this in your makefile
EXTRA_CFLAGS=’-save-temps’
This will generate all the intermediate files in generating .ko
If you need only .i file.
$ make -C /lib/modules/`uname -r`/build M=${PWD} hello.i

Theory2:
KERNEL_VERSION macro is used to build an integer code from the individual numbers that build up a version number.
#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))

Header File: <linux/version.h>

Theory3:
UTS_RELEASE macro expands to a string describing the version of this kernel tree.

Header File: #include <generated/utsrelease.h>

Theory4:
If you find out how many times your driver code is used by application, we can maintain a static counter variable in open system call and later print it.

Theory5:
Sometimes a device needs to be opened once at a time; More specifically, do not allow the second open before the release. To implement this restriction, you choose a way to handle an open call for an already open device: it can return an error (-EBUSY), block open calls until a release operation, or shut down the device before do the open.

Logic:
Initialize the atomic value with 1
In open function, decrement and check whether the value is zero, if zero then return success
If the value is not zero, then increment the value and return EBUSY
In release function, increment the value of atomic variable.

Theory6:
To allow a single user to open a device in multiple processes but allow only one user to have the device open at a time. To achieve this, two items are needed:
	an open count
	uid of the owner of the device.

The open call grants access on first open but remembers the owner of the device.

Theory7:
Traditionally Linux/Unix only had two level of privileges:
	1. Root
	2. Non-Root

No security checks where performed for processes running in root user, whereas processes running in non-root user were subjected to security checks. No intermediate solution was existing at that time. setuid was only the option for the non-root processes to get privileges. Giving all privileges when only few were required was not a good solution and is a target for attack. POSIX Capabilities is a concept which divides root privileges into a set of privileges.

These privileges/values then can be independently assigned to the processes, by this way the process will only contain the require privileges and some level of security is achieved. File '/usr/include/linux/capability.h' contains list of capabilities available in Linux or [ man capabilities ].

Command to find which capabilities are set for a particular file? [ getcap <filename> ]

Command to set capabilities for a particular file?
Each process has three sets of capabilities:
1. Permitted: capabilities that this process can possibly have. Superset of effective
2. Effective:  capabilities that this process actually has.
3. Inheritable: capabilities that this process can pass to a child process

Each capability is implemented as a bit in each of the bitmap, which can be set or unset
$ setcap cap_sys_boot+ep /path/to/executable
The above command sets 'CAP_SYS_BOOT' capabilities in both extended and permitted bitmap

Capabilities are implemented on Linux using extended attributes in the security namespace. All the major file systems such as ext2, ext3, ext4, JFS, XFS etc support extended attributes

When a process tries to perform a privileged operation, the kernel checks whether the particular capability for performing the operation is set in the effective capability bitmap, if yes then it allows, else throws 'permission denied' error.

Theory8:
CAP_DAC_OVERRIDE: Allows a non-root user full file system access. Bypasses file read, write and execute permission check. DAC stands for "discretionary access control"
$sudo setcap cap_dac_override+ep userapp
$getcap userapp

Theory9:
CAP_SYS_ADMIN is the ability to perform all the system administration operations. Almost near to root. Before performing a privileged operation, a device driver should check that the calling process has the appropriate capability or not. Capabilities checks are performed with the capable function.

Header File: <linux/sched.h>
int capable(int capability);

Theory10:
As you know the open system call takes set of flags as second argument that control opening a file and mode as third argument that specifies permission the permissions of a file if it is created.

int open(const char *pathname, int flags, mode_t mode);
The do_sys_open function starts from the call of the build_open_flags function which does some checks that set of the given flags is valid and handles different conditions of flags and mode.

File: fs/open.c
Let's look at the implementation of the build_open_flags. This function is defined in the same kernel file and takes three arguments:
flags - flags that control opening of a file;
mode - permissions for newly created file;
The last argument - op is represented with the open_flags structure:

struct open_flags {
        int open_flag;
        umode_t mode;
        int acc_mode;
        int intent;
        int lookup_flags;
};

which is defined in the fs/internal.h header file and as we may see it holds information about flags and access mode for internal kernel purposes. Implementation of the build_open_flags function starts from the definition of local variables and one of them is:
int acc_mode = ACC_MODE(flags);
This local variable represents access mode and its initial value will be equal to the value of expanded ACC_MODE macro. 
#define ACC_MODE(x) ("\004\002\006\006"[(x)&O_ACCMODE])
#define O_ACCMODE   00000003

The "\004\002\006\006" is an array of four chars:

"\004\002\006\006" == {'\004', '\002', '\006', '\006'}
So, the ACC_MODE macro just expands to the accession to this array by [(x) & O_ACCMODE] index. As we just saw, the O_ACCMODE is 00000003. By applying x & O_ACCMODE we will take the two least significant bits which are represents read, write or read/write access modes:

#define O_RDONLY        00000000
#define O_WRONLY        00000001
#define O_RDWR          00000002

Theory11:
When the process terminates, the release function will be called even if we don't call close() from user space

Theory12:
Misc drivers:
In UNIX, Linux and similar operating systems, every device is identified by two numbers: a “major” number and a “minor” number. These numbers can be seen by invoking ls -l /dev. Every device driver registers its major number with the kernel and is completely responsible for managing its minor numbers. Every driver needs to register a major number, even if it only deals with a single device. Misc (or miscellaneous) drivers are simple char drivers that share certain common characteristics. The kernel abstracts these commonalities into an API (implemented in drivers/char/misc.c), and this simplifies the way these drivers are initialized. All misc drivers are assigned a major number of 10, but each can choose a single minor number. So, if you have a char driver needs to support multiple devices, it's not the candidate for being a misc driver.

the sequence of initialization steps that a char driver performs:
1. Allocates major/minor number using alloc_chrdev_region() and friends
2. Creates /dev and /sys nodes using class_device_create() function
3. Register itself as a char driver using cdev_init() and cdev_add()

static struct miscdevice misc_dev ={
    .minor = 10,
    .name = MYDEV_NAME,
    .fops = &mycdrv_fops,
};

misc_register(&misc_dev);
In the above example, I have statically assigned a minor number 10. You can also request for dynamic minor number assignment by specifying MISC_DYNAMIC_MINOR in the minor field. Each misc driver automatically appears under /sys/class/misc without explicit effort from the driver writer.

The misc API seems to make your life easier when you're writing a small character driver and do not want to need to allocate a new major number only to use one minor number. It simplifies things, but all the file operations are still available using the fops member of struct miscdevice. The basic difference is you only get one minor number per misc device.

Theory14:
Loading Modules on Demand:
Linux offers support for automatic loading and unloading of modules. This feature avoid wasting kernel memory by keeping drivers in core memory when not in use. This ability to request additional modules when they are needed is particularly useful for drivers using module stacking. To request the loading of a module, call request_module:

int request_module(const char *module_name);

Note that request_module is synchronous -- it will sleep until the attempt to load the module has completed. This means, of course, that request_module cannot be called from interrupt context. The return value indicates that request_module was successful in running modprobe, but does not reflect the success status of modprobe itself. When the kernel code calls request_module, a new "kernel thread'' process is created, which runs modprobe in the user context. But we can't remove it dynamically through this.
