Passing Parameters
--------------------

Like ordinary functions, system calls often require some input/output parameters.

Parameters of ordinary C functions are usually passed by writing their values in the active program stack

Because system calls are a special kind of function that cross over from user land to kernel land, neither the user mode or kernel mode stack can be used.

Rather, system call parameters are written in the CPU registers before issuing the system call.

The kernel then copies the parameters stored in the CPU registers on to the kernel mode stack before invoking the system call service routine.

By ABI convention, 

On x86
	register %eax contains the syscall number
	registers %ebx, %ecx, %edx, %esi, %edi, and %ebp contain up to six arbitrary arguments
	instruction to switch: int $0x80
	return value: %eax

On x86_64
	register rax contains the syscall number
	registers rdi, rsi, rdx, rcx, r8 and r9 are used for arguments
	instruction: syscall
	return value: rax
