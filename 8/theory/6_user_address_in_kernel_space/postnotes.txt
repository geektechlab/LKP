=======================================================
Access to the address space of the process
=======================================================

Accessing process address space can not be done directly (by de-referencing a user-space pointer). Because kernel driver can't/shouldn't access user space memory. If we try to do that, then page domain fault will happen and OOPs will happen.

Direct access of a user-space pointer can lead to 
	---> incorrect behavior (depending on architecture, a user-space pointer may not be valid or mapped to kernel-space), ( in ARM architecture, EL0 address access might not be allowed from EL1 ? )
	---> a kernel oops (the user-mode pointer can refer to a non-resident memory area) or 
	---> security issues. 

Proper access to user-space data is done by calling the macros / functions below:

old linux version before 4.x:
#include <asm/uaccess.h>

latest linux version:
#include <linux/uaccess.h>

put_user(type val, type *address);
get_user(type val, type *address);
unsigned long copy_to_user(void __user *to, const void *from, unsigned long n);
unsigned long copy_from_user(void *to, const void __user *from, unsigned long n)

All macros / functions return 0 in case of success and another value in case of error and have the following roles:

-->	put_user put in the user-space at the address address value of the val; Type can be one on 8, 16, 32, 64 bit (the maximum supported type depends on the hardware platform);

-->	get_user analogue to the previous function, only that val will be set to a value identical to the value at the user-space address given by address;

-->	copy_to_user copies n bytes from the kernel-space, from the address referenced by from in user-space to the address referenced by to;

-->	copy_from_user copies n bytes from user-space from the address referenced by from in kernel-space to the address referenced by to.
