Theory0:
Atomic Operations:
Several assembly language instructions are of type “read-modify-write”. they access a memory location twice, the first time to read the old value and  the second time to write a new value.

Suppose that two kernel control paths running on two CPUs try to “read-modify-write” the same memory location at the same time by executing nonatomic operations. At first, both CPUs try to read the same location, but the memory arbiter (a hardware circuit that serializes accesses to the RAM chips) steps in to grant access to one of them and delay the other. However, when the first read operation has completed, the delayed CPU reads exactly the same (old) value from the memory location. Both CPUs then try to write the same (new) value to the memory location; again, the bus memory access is serialized by the memory arbiter, and eventually both write operations succeed. However, the global result is incorrect because both CPUs write the same (new) value. Thus, the two interleaving “read-modify-write” operations act as a single one.

    Kernel Thread1              Kernel Thread2  
    ------------------------------------------------------
    read i (5)
                                read i(5)
    increment i(5 -> 6) 
                                increment i (5 -> 6)
    write i(6)
                                write i(6)

Theory2:
Atomic Operations:
The easiest way to prevent race conditions due to “read-modify-write” instructions is by ensuring that such operations are atomic at the chip level. Every such operation must be executed in a single instruction without being interrupted in the middle and avoiding accesses to the same memory location by other CPUs. Most CPU instruction set architectures define instruction opcodes that can perform atomic read-modify-write operations on a memory location. In general, special lock instructions are used to prevent the other processors in the system from working until the current processor has completed the next action.

atomic_t:
When you write C code, you cannot guarantee that the compiler will use an atomic instruction for an operation like a = a + 1 or even for a + +. Thus, the Linux kernel provides a special atomic_t type (an atomically accessible counter) and some special functions and macros that act on atomic_t variables.

Header File: <asm/atomic.h>
typedef struct { volatile int counter; } atomic_t;

Why a new user defined data type atomic_t is needed?
Because the atomic data types are ultimately implemented with normal C types, the kernel
encapsulates standard variables in a structure that can no longer be processed with normal operators
such as ++.

What happens to atomic variables when the kernel is compiled without SMP Support?
it works the same way as for normal variables (only atomic_t encapsulation is observed) because there is no interference from other processors

Theory3:
atomic_t:

Initialization:
atomic_t i;  //define i
atomic_t i = ATOMIC_INIT(1); //define i and initialize it to 1

Increment/Decrement:
void atomic_inc(atomic_t *i);  //Add 1 to *i
void atomic_dec(atomic_t *i);  //Subtract 1 from *i

Set/Read:
void atomic_set(atomic_t *i, int j); //Atomically set counter i to value specified in j
int atomic_read(atomic_t *i); //Read value of the atomic counter i

Add/Sub:
void atomic_add(int val, atomic_t *i); //Atomically add val to atomic counter i
void atomic_sub(int val, atomic_t *i); //Atomically subtract val from atomic counter i

Common use of atomic operations:
	A common use of the atomic integer operations is to implement counters
	Protecting a sole counter with a complex locking scheme is overkill, so instead developers use 
	atomic_inc() and atomic_dec(), which are much lighter in weight.

Theory4:
Atomic Operation and test:
int atomic_dec_and_test(atomic_t *i); //atomic Subtract 1 from *i and return 1 if the result is zero; 0 otherwise
int atomic_inc_and_test(atomic_t *i); //atomic Add 1 to *i and return 1 if the result is zero; 0 otherwise
// Atomically subtract val from *i and return 1 if the result is zero; otherwise 0
int atomic_sub_and_test(int val, atomic_t *i); 
//Atomically add val to *i and return 1 if the result is negative; otherwise 0
int atomic_add_negative(int val, atomic_t *i);

Theory5:
Atomic Add/Subtract and return:
int atomic_add_return(int val, atomic_t *i);// Atomically add val to *i and return the result.
int atomic_sub_return(int val, atomic_t *i); // Atomically subtract val from *i and return the result.
int atomic_inc_return(atomic_t *i);// Atomically increment *i by one and return the result.
int atomic_dec_return(atomic_t *i);// Atomically decrement *i by one and return the result.

Theory6:
More atomic operations:
//Atomically adds val to i and return pre-addition value at i
int atomic_fetch_add(int val, atomic_t *i);
//Atomically subtracts val from i, and return pre-subtract value at i
int atomic_fetch_sub(int val, atomic_t *v);
//Reads the value at location i, and checks if it is equal to old; if true, swaps value at v with new, and always returns value read at i
int atomic_cmpxchg(atomic_t *i, int old, int new);
//Swaps the oldvalue stored at location i with new, and returns old value i
int atomic_xchg(atomic_t *i, int new);

Theory7:
64-bit Atomic Operations:
Many processor architectures have no 64-bit atomic instructions, but we need atomic64_t in order to support the perf_counter subsystem. This adds an implementation of 64-bit atomic operations using hashed spinlocks to provide atomicity.

typedef struct {
	long long counter;
} atomic64_t;

These functions have the naming convention atomic64_*()

Theory8:
Atomic Bitwise Operations:
In addition to atomic integer operations, the kernel also provides a family of functions that operate at the bit level.

Header File: <asm/bitops.h>

These functions operate on generic pointer. There is no equivalent of the atomic integer atomic_t.

Arguments:
	1. Bit Number: 0 - 31 for 32 bit machines and 0 - 63 for 64-bit machines
	2. Pointer with valid address

//Atomically set the bit nr in location starting from addr
void set_bit(int nr, volatile unsigned long *addr);
//Atomically clear the nr-th bit starting from addr.
void clear_bit(int nr, volatile unsigned long *addr);
//Atomically flip the value of the nr-th bit starting from addr.
void change_bit(int nr, volatile unsigned long *addr);

Theory9:
Atomic bit operations with return value:
//Atomically set the bit nr in the location starting from p, and return old value at the nrth bit
int test_and_set_bit(unsigned int nr, volatile unsigned long *p);
//Atomically clear the bit nr in the location starting from p, and return old value at the nrthbit
int test_and_clear_bit(unsigned int nr, volatile unsigned long *p);
//Atomically flip the bit nr in the location starting from p, and return old value at the nrth bit
int test_and_change_bit(unsigned int nr, volatile unsigned long *p);

Theory10:
Non atomic bitwise operations:
Conveniently, nonatomic versions of all the bitwise functions are also provided. They behave identically to their atomic siblings, except they do not guarantee atomicity, and their names are prefixed with double underscores. For example, the nonatomic form of test_bit() is __test_bit(). If you do not require atomicity (say, for example, because a lock already protects your data), these variants of the bitwise functions might be faster.
