Theory0:
Minimal Linux with QEMU/Busybox: QEMU (short for Quick Emulator) is a free and open-source  hypervisor that performs hardware virtualization.

Busybox : combines tiny versions of many common UNIX utilities into a single small executable.
	  BusyBox provides a fairly complete environment for any small or embedded system.
	  Note: The utilities in BusyBox generally have fewer options than their full-featured GNU cousins

How it is useful? Building a minimal Linux kernel and booting it on an emulator allows developers to quickly build additional Linux kernel features.

Build Busybox:
Step 1: Download busybox from their website : https://busybox.net/
	$ wget https://busybox.net/downloads/busybox-1.31.0.tar.bz2

Step 2: Extract the sources.
	$ tar xvf busybox-1.31.0.tar.bz2

Step 3: The busybox build system supports O= means “place build output here”. This allows you to host multiple different configurations out of the same source tree.
	$ cd busybox-1.31.0
	$ mkdir -pv build
	$ make O=build defconfig

Step 4: We need to statically link busybox in order to avoid fiddling with shared libraries.
	$ make O=build menuconfig
	Settings -> Build Options -> Build Static Binary

Step 5: Compile/Install busybox
	$ cd build
	$ time make -j8
	$ time make install

Step 6: Now, build/_install directory will have a directory structure with all the unix tools.

Theory1:
Build Linux Kernel:
Step1 : Download the latest linux kernel from kernel.org
$ wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.2.tar.xz
$ tar xvf linux-5.4.2.tar.xz

Step 2: Configure Linux Kernel
$ cd linux-5.4.2
$ mkdir -pv ../linux_build
$ make O=../linux_build allnoconfig
$ make O=../linux_build menuconfig

64-bit kernel ---> yes
General setup ---> Initial RAM filesystem and RAM disk (initramfs/initrd) support ---> yes
General setup ---> Configure standard kernel features ---> Enable support for printk ---> yes
Executable file formats / Emulations ---> Kernel support for ELF binaries ---> yes
Executable file formats / Emulations ---> Kernel support for scripts starting with #! ---> yes
Device Drivers ---> Generic Driver Options ---> Maintain a devtmpfs filesystem to mount at /dev ---> yes
Device Drivers ---> Generic Driver Options ---> Automount devtmpfs at /dev, after the kernel mounted the rootfs ---> yes
Device Drivers ---> Character devices ---> Enable TTY ---> yes
Device Drivers ---> Character devices ---> Serial drivers ---> 8250/16550 and compatible serial support ---> yes
Device Drivers ---> Character devices ---> Serial drivers ---> Console on 8250/16550 and compatible serial port ---> yes
File systems ---> Pseudo filesystems ---> /proc file system support ---> yes
File systems ---> Pseudo filesystems ---> sysfs file system support ---> yes

Step 3: Build Linux Kernel
$ cd ../linux_build
$ time make -j8

Theory2:
initrd vs initramfs:
initrd (initial ramdisk) is a scheme for loading a temporary root file system into memory, which may be used as part of the Linux startup process. initrd and initramfs refer to two different methods of achieving this. Both are commonly used to make preparations before the real root file system can be mounted. An image of this initial root file system (along with the kernel image) must be stored somewhere accessible by the Linux bootloader or the boot firmware of the computer. The bootloader will 
	load the kernel,
	initial root file system image into memory and 
	then start the kernel

At the end of its boot sequence, the kernel tries to determine the format of the image from its first few blocks of data, which can lead either to the initrd or initramfs scheme. In the initramfs scheme (available since the Linux kernel 2.6.13), the image is a cpio archive (optionally compressed).

cpio - copy in and out

The archive is unpacked by the kernel into a special instance of a tmpfs that becomes the initial root file system the kernel executes /init as its first process that is not expected to exit.

Theory3:
Create Initramfs:
Step1 : Create initramfs directory
$ mkdir initramfs
$ cd initramfs

Step2: Create directory structure
$ mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin}}

Step3: Copy busbox install directory
$ cp -av busybox-1.31.0/build/_install/* initramfs/
-av: a means -dR --preserve=all, v means explain what is being done
-dR --preserve=all:
d means --no-dereference --preserve=links
R means copy directories recursively

Step4: Create init and make it executable 
$ vi initramfs/init

#!/bin/sh 
mount -t proc none /proc
mount -t sysfs none /sys
mount -t debugfs none /sys/kernel/debug

echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"
exec /bin/sh
$ chmod +x initramfs/init

Step5: Create initramfs
$ cd initramfs
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz

Theory4:
Boot the kernel/initramfs with QEMU:
Step1 : Install qemu emulator
$ sudo apt install qemu-system-x86
$ qemu-system-x86_64 --version

Step2: 
$ qemu-system-x86_64 -kernel linux_build/arch/x86/boot/bzImage -initrd initramfs.cpio.gz -m 512
kernel option specifies the kernel image
initrd option specifies the initramfs
m option to specify the memory size (optional)

Step 3:
If you want it to boot on your terminal instead of a separate screen you can tell the kernel to use ttyS0
$ qemu-system-x86_64 -kernel linux_build/arch/x86_64/boot/bzImage -initrd initramfs.cpio.gz  -nographic -append "console=ttyS0"
Exit Qemu by hitting Ctl-a c then typing “quit” at the qemu monitor shell.

check boot time. It is very less.
also check /proc/meminfo and find that it is using very less memory.
