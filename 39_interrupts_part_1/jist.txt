Theory0:
What is Interrupt? Interrupt is an input signal to the processor, sent by the hardware peripherals when they need processor attention.

What is the purpose of Interrupts?
Example:

we want to perform an action with an incoming packet from the network card as soon as the packet arrives. If you don't want to continuously ask the network card «Has my packet arrived?» and waste your processor time, you can use external hardware interrupt IRQ. The interrupt line from a device should be connected to the INTR line of the CPU, and after each packet is received, the network card will make a signal over this line. The CPU will sense this signal and know that the network card has information for it. Only after that the CPU will read the incoming packet.

Types of Interrupt:
1. Hardware/Asynchronous:
	--> Generated by hardware devices 
	--> Occurs at arbitrary times(asynchronously) with respect to clock signals
	--> Examples: Pressing a key on the keyboard, Mouse Movement, Timer fired,
		      Network cards report the arrival of packet with interrupt.

2. Software/Synchronous: 
	--> Generated by executing instructions
	--> Occurs synchronously with respect to processor clock
	--> Also called as exceptions/traps
	--> Examples: Divide-By-Zero, system call, page fault

Theory1:
Exceptions: Exceptions are classified as faults, traps and abort, depending on the way they are reported and whether the instruction that caused the exception can be restarted without loss of program. traps increment the instruction pointer, faults do not, and aborts 'explode'.

Faults: These can be corrected and the program may continue as if nothing happened. Eg. page fault
Traps: Traps are reported immediately after the execution of the trapping instruction. Eg. int instruction, updating instruction pointer
Aborts: Some severe unrecoverable error. Eg. hardware failure

General Protection Fault: A General Protection Fault may occur for various reasons. The most common are:

Segment error (privilege, type, limit, read/write rights).
Executing a privileged instruction while CPL != 0.
Writing a 1 in a reserved register field.
Referencing or accessing a null-descriptor.
Trying to access an unimplemented register (like: mov cr6, eax)
The saved instruction pointer points to the instruction which caused the exception.

How debuggers work?
To implement breakpoints on the x86 architecture, software interrupts (also known as "traps") are used. Breakpoints are implemented on the CPU by a special trap called int 3. int is x86 jargon for "trap instruction" - a call to a predefined interrupt handler. x86 supports the int instruction with a 8-bit operand specifying the number of the interrupt that occurred. Run the program in gdb, compile with debugging information.

Theory2:
Triggering Methods: Each interrupt signal input is designed to be triggered by either a logical signal level or a particular signal edge (level transition).

Level Triggered:
	Interrupt is requested by holding the interrupt signal at its particular (high or low) active logic level. Level triggered interrupts happen as long as the interrupt line is held at active level. As long as the line is active, you get interrupt, when you serve the interrupt and return, if the interrupt line is still active, you get the interrupt again immediately. Level-triggered inputs allow multiple devices to share a common interrupt signal via wired-OR connections. 

Edge Triggered:
	Interrupt is requested by a level transition on the interrupt line.
		Falling Edge (high to low)
		Rising Edge  (Low to High) 

	These interrupts are issued per transition and not repeated. e.g. in networking when the packet queue goes from empty to non-empty. This makes it critical to never miss an edge triggered interrupt, because failure to handle one interrupt may result in no further interrupts from happening.

Theory3:
Masking: Processors typically have an internal interrupt mask register. This allows selective enabling and disabling of hardware interrupts.

Each interrupt signal is associated with a bit in the mask register.
Bit = 1 , Interrupt Enabled
Bit = 0 , Interrupt Disabled

When the interrupt is disabled, the associated interrupt signal will be ignored by the processor.
Maskable Interrupts: Interrupts which can be enabled/disabled
NonMaskable Interrupts: Interrupts which cannot be disabled.
			Example: NMI, timeout signal from watchdog timer

Theory4:
The 8086 processor has two hardware interrupt signals

– NMI non-maskable interrupt
– INTR Interrupt request (maskable interrupt)

How to support more than two interrupts? It would be very unproductive to make a ton of INTR pins on the CPU for all of them. To solve this problem a special chip was invented — an interrupt controller.

System software, such as the BIOS or operating system, is responsible for programming the interrupt router. 

Theory5:
APIC (Advanced PIC): The PIC method only works for a single processor systems. PIC can only send interrupts to one CPU, and in a multiprocessor system it is desired to load CPUs in a balanced way. The solution to this problem was the new APIC interface (Advanced PIC).

Comprises of two components:
1. IO-APIC - Interfaces with Devices
2. LAPIC   - Interfaces with CPU

LAPIC:
	Each processor in a multiprocessor system consists of a one LAPIC. Responsible for:
		receiving various interrupt requests and delivering them to the processor
		handling prioritization of interrupts
		sending interrupts to other processors (known as inter processor interrupts or IPIs)

	LAPIC can be connected directly to I/O devices via local interrupt inputs (timer, thermal sensor) or through IOAPIC via external interrupt inputs. LAPIC can generate interrupts due to interrupt requests received from various sources:
		IPIs received from other processors
		interrupts coming from LINT or EXTINT

I/O APIC:
	connects to the devices to allow device interrupt requests to be routed to LAPIC(s). There can be one or more IOAPIC in the system. Each IOAPIC has 24 interrupt lines. IOAPIC receives interrupt requests from the devices and sends them to LAPIC(s) based upon the redirection table entries (RTE) programmed in the IOAPIC.

Note: To maintain backward compatibility, APIC emulates 8259 PIC.

Detection: The CPUID.01h:EDX[bit 9] flag specifies whether a CPU has a built-in local APIC.

Theory6:
cpuid is an x86 opcode which stands for CPU IDentification. The CPUID instruction can be used to retrieve various amount of information about your cpu:
	Vendor String
	Model Number
	size of internal caches
	List of CPU Features

$ man 4 cpuid

The  cpuid driver is not auto-loaded.  On modular kernels you might need to use the following command to load it explicitly before use:

$ modprobe cpuid

Most of the information in cpuid is reported by the kernel in cooked form either in /proc/cpuinfo

$ cat /proc/cpuinfo | grep -i apicid

apicid: A unique ID given to each logical processor upon startup

Theory7:
What happens when there is an interrupt:
Device Asserts IRQ of I/O APIC
I/O APIC transfer interrupt to LAPIC
LAPIC asserts CPU interrupts
After current instruction completes CPU senses interrupt line and obtains IRQ number from LAPIC
Jumps to interrupt handler

Theory8:
How does the hardware finds the interrupt handler?
Interrupt Vector: On x86 Each interrupt or exception is identified by a number between 0 and 255. Intel calls this number a vector. The interrupt vector is used by the interrupt-handling mechanism to locate the system-software service routine assigned to the exception or interrupt. Up to 256 unique interrupt vectors are available in x86. The number of interrupt vectors or entry points supported by a CPU differs based on the CPU architecture. The first 32 vectors are reserved for predefined exception and interrupt conditions. Look into arch/x86/include/asm/traps.h 

Interrupt Descriptor Table: The IDT is a linear table of 256 entries which associates an interrupt handler with each interrupt vector. When an interrupt is fired, the CPU looks at the IDT table, and finds what method needs to be called. Each descriptor is of size 8 bytes (on x86) and 16 bytes (on x86_64). During early boot, the architecture-specific branch of the kernel code sets up the IDT in memory and programs the IDTR register (special x86 register)of the processor with the physical start address and length of the IDT.

Theory9:
Interrupt Handling in Linux Kernel:
1. Whenever an interrupt occurs, assembly instructions in linux kernel are executed, which
	locates relevant vector descriptor by multiplying reported vector number by size of vector number(8/16)
	and adding the result to the base address of IDT.
2. common_interrupt: arch/x86/entry/entry_64.S:
	a. saves the context of the running process
	b. This includes instruction pointer (IP), stack pointer and other registers needed to resume the process again
	c. This context is usually saved on the stack.
	d. Then the context is changed to interrupt stack. 
3. Finally it arrives at do_IRQ(). do_IRQ() is the common function for all hardware interrupts
	arch/x86/kernel/irq.c
4. Finds IRQ number in saved %EAX register
5. Calls handle_irq which will finally call our registered interrupt handler.

Theory10:
/proc/interrupts: Contains statistics related to interrupts on the system

           CPU0       CPU1       CPU2       CPU3       CPU4       CPU5       
   0:          2          0          0          0          0          0   IO-APIC    2-edge      timer
   1:        458          0          0          0       6154          0   IO-APIC    1-edge      i8042
   8:          0          0          0          0          0          1   IO-APIC    8-edge      rtc0
   9:          0          0          0          0          0          0   IO-APIC    9-fasteoi   acpi
  12:          0          0          0      22185          0          0   IO-APIC   12-edge      i8042
  14:          0          0          0          0          0          0   IO-APIC   14-edge      ata_piix
  15:          0          0          0          0          0          0   IO-APIC   15-edge      ata_piix
  16:          0      19541          0          0          0          0   IO-APIC   16-fasteoi   vmwgfx, snd_ens1371
  17:       9825          0      47519          0          0          0   IO-APIC   17-fasteoi   ehci_hcd:usb1, i

Column 1:  IRQ number
            the file shows only interrupts corresponding to installed handlers
Column 2:  counter of the number of interrupts received.
           A column is present for each processor on the system
Column 3/4: Type of the interrupt and device that handles the interrupt.
            For x86.
            XT-PIC — This is the old AT computer interrupts. 8259
            IO-APIC 
Column 5:  device associated with this interrupt
            This name is supplied by the devname parameter to request_irq(),

Difference between  IO-APIC-fasteoi and IO-APIC-edge? The difference lies in the way the interrupts are triggered.

The -edge interrupt are edge triggered.
The -fasteoi interrupts are level interrupts that are triggered until the interrupt event is acknowledged in the programmable interrupt controller (PIC). 
The EOI stands for End Of Interrupt.

Theory11:
Watch Interrupts: To see the interrupts occurring on your system, run the command:

# watch -n1 "cat /proc/interrupts"
The watch command executes another command periodically, in this case "cat /proc/interrupts"

The -n1 option tells watch to execute the command every second
-d option of watch highlight  the  differences  between successive updates

# watch -n 0.1 -d 'cat /proc/interrupts'
--no-title / -t option of watch Turn off the header showing the interval, command, and current time at the top of the display, as well as the following blank line.

# watch -n 0.1 -d --no-title 'cat /proc/interrupts'

Theory12:
Interrupt Handlers: Interrupt handlers are the responsibility of the driver managing the hardware. If the device uses interrupts, then driver must register one interrupt handler.

Registering an interrupt handler:
Header File: <linux/interrupt.h>
int request_irq(unsigned int irq,
        irq_handler_t handler,
        unsigned long flags,
        const char *name,
        void *dev);

Parameters:
irq     --> The interrupt number being requested
            For some devices,for example legacy PC devices such as the system timer or keyboard, this value is typically hard-coded.
            For most other devices, it is probed or otherwise determined programmatically and dynamically.
handler   --> function pointer to the actual interrupt handler that services this interrupt.
              invoked whenever the operating system receives the interrupt
              typedef irqreturn_t (*irq_handler_t)(int, void *);
flags     --> bitmask of options related to interrupt management.
name      --> Name to be displayed in /proc/interrupts
dev       --> Used for shared Interrupt Lines

Return Value:
Success  -->    Returns Zero
Failure  -->    Non-Zero Value

void free_irq(unsigned int irq_no, void *dev);
When the interrupt is released, using the free_irq() function, you must send the same pointer value (dev) along with the same interrupt number (irq_no).

Kernel registers all interrupt handlers with interrupt and one by one calls all and then finds if anyone returns done.

Theory13:
Keyboard Interrupt: When a key is pressed, the keyboard controller informs PIC  to cause an interrupt. IRQ #1 is the keyboard interrupt, so when a key is pressed, IRQ 1 is sent to the PIC. PIC tells the CPU an interrupt occurred. When the CPU acknowledges the "interrupt occurred" signal, the PIC chip sends the interrupt number (between 00h and FFh, or 0 and 255 decimal) to the CPU. For each key pressed on the keyboard, it generates two interrupts (pressed and release).
