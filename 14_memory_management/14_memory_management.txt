Theory0:
zones: Linux kernel divides physical RAM into a number of different memory regions: zones. What memory regions(zones) there are depends on whether your machine is 32-bit or 64-bit and also how complicated it is.

Zones:
	1. DMA: low 16 MBytes of memory. At this point it exists for historical reasons. There were hardware that could only do DMA into this area of physical memory.
	2. DMA32:	exists only in 64-bit Linux. It is the low 4 GBytes of memory, more or less. It exists because the transition to large memory 64-bit machines has created a class of hardware that can only do DMA to the low 4 GBytes of memory.
	3. Normal: It is different on 32-bit and 64-bit machines. On 64-bit machines, it is all RAM from 4GB or so on upwards. On 32-bit machines it is all RAM from 16 MB to 896 MB for complex and somewhat historical reasons. Note that this implies that machines with a 64-bit kernel can have very small amounts of Normal memory unless they have significantly more than 4GB of RAM. For example, a 2 GB machine running a 64-bit kernel will have no Normal memory at all while a 4 GB machine will have only a tiny amount of it. We will have only DMA zone.
	4. HighMem:	exists only on 32-bit Linux. It is all RAM above 896 MB, including RAM above 4 GB on sufficiently large machines.

Within each zone, Linux uses a buddy-system allocator to allocate and free physical memory.

Buddy Allocator:
Memory is broken up into large blocks of pages where each block is a power of two number of pages (2^order). Starts from 4KB page. All free pages are split into 11 (MAX_ORDER) lists, each contains a list of 2^order pages. [ check all 11 columns in /proc/buddyinfo ] [ watch video 9:00-12:00 ].

When an allocation request is made for a particular size, the buddy system looks into the appropriate list for a free block, and returns its address, if available. However, if it cannot find a free block, it moves to check in the next high-order list for a larger block, which if available it splits the higher-order block into equal parts called buddies, returns one for the allocator, and queues the second into a lower-order list. When both buddy blocks become free at some future time, they are coalesced to create a larger block. [ /proc/buddyinfo ] shows all zones present.

Using the buddy algorithm, each column represents the number of pages of a certain order (a certain size) that are available at any given time. check available RAM using [ free -m ]

# cat /proc/buddyinfo 
Node 0, zone      DMA      1      1      0      1      2      1      1      0      1      1      3
Node 0, zone   Normal      1      1      1      1      3      1      1      2      3      4    207
Node 0, zone  HighMem     22      8      4      1      1      1      1      1      1      2     34

highmem will not be present if it has only 512 MB memory. Verify by configuring QEMU and then running /proc/buddyinfo ( video 5:00 ). This means, zone DMA, there are 1 of 2^(0*PAGE_SIZE) free chunks of memory, 1 of 2^(1)*PAGE_SIZE, 0 of 2^(2)*PAGE_SIZE and so on upto 3*(2^10)*PAGE_SIZE = Nearly 16 MB

virtual kernel memory layout:
x86: You can see in dmesg | grep -A 10 'virtual kernel memory layout'
x86_64: Documentation/x86/x86_64/mm.rst

Theory1:
can I use virt_to_phys for user space memory in kernel module? Can I use virt_to_phys to get the physical address returned by malloc ?
virt_to_phys: The returned physical address is the physical (CPU) mapping for the memory address given. It is only valid to use this function on addresses directly mapped or allocated via kmalloc. It means It is used by the kernel to translate kernel virtual address (not user virtual address) to physical address

Theory3:
What is the maximum size allocatable using kmalloc?
The upper limit (number of bytes that can be allocated in a single kmalloc request), is a function of:
	the processor – really, the page size – and the number of buddy system freelists (MAX_ORDER).
( check in include/linux/slab.h [ IMP: video 24:00 - 29:00 ] )

On both x86 and ARM, with a standard page size of 4 Kb and MAX_ORDER of 11
#define KMALLOC_SHIFT_MAX       (MAX_ORDER + PAGE_SHIFT - 1)
MAX_ORDER = 11 , PAGE_SHIFT = 12 = 11 + 12 -1 = 22
/* Maximum allocatable size */
#define KMALLOC_MAX_SIZE        (1UL << KMALLOC_SHIFT_MAX) = 2^22 = 4*1024*1024 = 4MB

Theory4:
What happens if we don't free the memory allocated by kmalloc?
Kernel memory is never freed automatically, even after module removal. [ RAM size/available can be fetched [ cat /proc/meminfo ] ]. ( watch video 25:00 - 35:00 ). Unlike this, in user space, malloc allocated memory gets leaked but claimed back when process is removed.

Theory5:
kmalloc may internally round up allocations and return more memory than requested. ksize() can be used to determine the actual amount of memory allocated. The caller may use this additional memory, even though a smaller amount of memory was initially specified with the kmalloc call. This function is not often needed; callers to kmalloc() usually know what they allocated. It can be useful, though, in situations where a function needs to know the size of an object and does not have that information handy.

Theory6:
kzalloc works like kmalloc, but also zero the memory.
void *kzalloc(size_t size, gfp_t flags);

Theory7:
Memory allocated by kmalloc() can be resized by:
void *krealloc(const void *p, size_t new_size, gfp_t flags);

Theory8:
The kmalloc() function returns physically and virtually contiguous memory. Physically contiguous memory has two primary benefits.
        1.  many hardware devices cannot address virtual memory.
        2.  a physically contiguous block of memory can use a single large page mapping. This minimizes the translation lookaside buffer (TLB) overhead of addressing the memory
Allocating physically contiguous memory has one downside: it is often hard to find physically contiguous blocks of memory, especially for large allocations.

Theory9:
vmalloc: Memory returned by vmalloc is only contiguous in virtual memory and not in physical memory.
                    virtual memory    physical memory
                    ----------        --------
               - - -|        |--------|      |
    vmalloc   /     |        |        |      |
    ---------/      |        |--------|      |
    |       |       |        |\       |      |
    |       |   --- |        | \      |      |
    |       |  /    |        |\ ----- |      |
    |       | /     |        | \      |      |
    ---------/      |        |  ------|      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    ----------        --------
The returned memory always comes from HIGH_MEM zone. HIGH_MEM zone is in only 32-bit machines. 64-bit machines don't have it.

Theory9:
What is the maximum size allocatable using vmalloc? Unlike kmalloc(), it will keep allocating till RAM size. Theoratically, /proc/meminfo -> vmalloctotal shows how much can we allocate.
[ bc -q ] launches calculator ?
[ /fs/proc/meminfo ] has vmalloc related proc calls.

Theory10:
Can i use ksize with vmalloc?
According to the documentation, "The caller must guarantee that objp points to a valid object previously allocated with either kmalloc() or kmem_cache_alloc()." 

Theory11:
Maximum Amount of memory can be allocated using vmalloc:
The vmalloc upper limit is, in theory, the amount of physical RAM on the system. Kernel reserves an architecture (cpu) specific “range” of virtual memory for the purpose of vmalloc: from VMALLOC_START to VMALLOC_END.
Header file: <asm/pgtable.h>

Theory12:
Differences between vmalloc and kmalloc:
1. Physical Memory:
	kmalloc: Guarantees the pages are physically contiguous and virtually contiguous
	vmalloc: It allocates virtually contiguous but not necessarily physically contiguous
2. Low Mem vs High Mem:
	kmalloc: Returns from Low Memory
	vmalloc: Returns from High Memory
3. Usage:
	kmalloc: Memory returned Can be used by hardware devices(DMA, IMP: PCI ( https://stackoverflow.com/questions/116343/what-is-the-difference-between-vmalloc-and-kmalloc ))
	vmalloc: Memory returned Cannot be used by hardware devices
4. Interrupt Context:
	kmalloc: can be used in interrupt context with 'GFP_ATOMIC'
	vmalloc: cannot be used in interrupt context
5. Allocator:
	kmalloc: Uses slab allocator which in turn use Page Allocator
	vmalloc: Directly uses Page Allocator
6. Overhead:
	kmalloc: less overhead
	vmalloc: more overhead, as each vmalloc requires page table changes and a translation look aside buffer invalidation.
7. Size:
	kmalloc: Cannot give large memory
	vmalloc: Useful for allocating large memory and no requirement of physical contiguous

Theory13:
kmalloc(0) returns a special ZERO_SIZE_PTR value. It is a non-NULL value which looks like a legitimate pointer, but which causes a fault on any attempt at dereferencing it. Any attempt to call kfree() with this special value will do the right thing, of course.

Theory15:
Kernel Stack. In a Linux System, every process has 2 stacks:
	User stack
	Kernel stack ( when process run in kernel space for given space )

User Stack in x86: Resides in user address space (0-3GB in 32-bit x86)
Kernel Stack in x86: Resides in kernel address space(3GB-4GB in 32-bit x86)

User space is afforded the luxury of a large, dynamically growing stack, whereas the kernel has no such luxury. The kernel's stack is small and fixed. Size of the per-process kernel stacks depends on both the architecture and a compile-time option. When the option is enabled, each process is given only a single page - 4KB on 32-bit architectures and 8KB on 64-bit architectures.

Why only one page?
	1. Less memory consumption per process
	2. As uptime increases, it becomes increasingly hard to find two physically contiguous unallocated pages.

Historically, interrupt handlers also used the kernel stack of the process they interrupted. As it placed tighter constraints on the already smaller kernel stack. Kernel developers implemented a new feature: interrupt stacks. Interrupts use their own stacks. It consumes only a single page per processor. Now, we have a kernel stack size of 16KB from Linux 3.15 in x86_64.

Theory16:
CONFIG_FRAME_WARN:
This kernel configuration option passes an option to the compiler to cause it to emit a warning when a static stack size for a routine is detected that is larger than the specified threshold. It requires gcc version 4.4 or later in order to work. The gcc option used is "-Wframe-larger-than=xxx". By default, CONFIG_FRAME_WARN has the value of 1024, but you can set it to any value from 0 to 8192. Linux kernel defines stack size 8192 bytes for each process. The sum of the stack frames of all active functions should not overflow 8192 bytes. This warning does not guarantee that you will overflow the stack space; it just shows that this function makes an overflow more likely (when used together with other big-frame functions, or with many smaller functions).

Theory17:
There's a way to get a list of how much stack space each function in your program uses.

checkstack.pl

It prints out a list of functions and their stack usage, biggest first.
$ objdump -D hello.ko | perl ~/linux-5.2.8/scripts/checkstack.pl
Note: it can't take into account recursive functions. It only performs static analysis
