Inline Assembly
----------------

In Linux Kernel, you normally see statements like:

asm volatile ("outb %al, $0x80");

asm volatile("mov %%cr0,%0" : "=r" (cr0));

This is inline assembly. In other words assembly code integrated in C/C++ language.

Advantages of Inline Assembly
------------------------------

a) Optimization:

	Programmers can use assembly language code to implement the most performance-sensitive parts of their program's algorithms
	code that is apt to be more efficient than what might otherwise be generated by the compiler

b) Access to processor specific instructions:

	Most processors offer special instructions, such as Compare and Swap and Test and Set instructions which may be used to construct semaphores or other synchronization and locking primitives

c) System calls: High-level languages rarely have a direct facility to make arbitrary system calls, so assembly code is used.

d) Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your C code
