Theory0:
How does the address of __kernel_vsyscall is determined?
----------------------------------------------------------

Userland processes (or C library on their behalf) call __kernel_vsyscall to execute system calls.

Address of __kernel_vsyscall is not fixed

Kernel passes this address to userland processes using AT_SYSINFO elf parameter

What are ELF Auxiliary Vectors?
-------------------------------

ELF auxiliary vectors are a mechanism to transfer certain kernel level information to the user processes.
Ex: AT_SYSINFO

It is a list of key-value pairs that the kernel's ELF binary loader (fs/binfmt_elf.c in the kernel source) constructs when a new executable image is loaded into a process.

The ELF loader 
	parses the ELF file, 
	maps the various program segments in the memory, 
	sets up the entry point and 
	initializes the process stack. 

It puts ELF auxiliary vectors on the process stack along with other information like argc, argv, envp

ELF loader puts an array (auxv) of ELF auxiliary vectors at the bottom of the stack.

To observe ELF Auxiliary Vectors
--------------------------------

There are a few methods for searching ELF auxilliary vectors:

	1. By using getauxval with the AT_SYSINFO argument. ( man 3 getauxval)
	2. By iterating to the end of the environment variables and parsing them from memory.

From Shell, we can discover the auxiliary vector that was supplied to an executable by setting the LD_SHOW_AUXV environment variable when launching an application
$ LD_SHOW_AUXV=1 ./binary

$ gcc userprog.c -o userprog -m32

ex: LD_SHOW_AUXV=1  /bin/ls

Theory1:
64-bit fast system calls
------------------------

Instruction from CPL 3 to CPL 0 -- syscall
Instruction from CPL 0 to CPL 3 -- sysret

From Intel Manual:

"SYSCALL invokes an OS system-call handler at privilege level 0. It does so by loading RIP from the IA32_LSTAR MSR (after saving the address of the instruction following SYSCALL into RCX)."

In other words: for the kernel to receive incoming system calls, it must register the address of the code that will execute when a system call occurs by writing its address to the IA32_LSTAR MSR.

arch/x86/kernel/cpu/common.c

void syscall_init(void)
{
....

wrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64);

}

call    do_syscall_64

__visible void do_syscall_64(unsigned long nr, struct pt_regs *regs)
{
        struct thread_info *ti;

        enter_from_user_mode();
        local_irq_enable();
        ti = current_thread_info();
        if (READ_ONCE(ti->flags) & _TIF_WORK_SYSCALL_ENTRY)
                nr = syscall_trace_enter(regs);

        /* 
         * NB: Native and x32 syscalls are dispatched from the same
         * table.  The only functional difference is the x32 bit in
         * regs->orig_ax, which changes the behavior of some syscalls.
         */
        nr &= __SYSCALL_MASK;
        if (likely(nr < NR_syscalls)) {
                nr = array_index_nospec(nr, NR_syscalls);
                regs->ax = sys_call_table[nr](regs);
        }

        syscall_return_slowpath(regs);
}

Theory2:
How a system call is executed in other architecture?
---------------------------------------------------

You can find the information from man page $ man 2 syscall

       arch/ABI    instruction           syscall #  retval  error    Notes
       ────────────────────────────────────────────────────────────────────
       alpha       callsys               v0         a0      a3       [1]
       arc         trap0                 r8         r0      -
       arm/OABI    swi NR                -          a1      -        [2]
       arm/EABI    swi 0x0               r7         r0      -
       arm64       svc #0                x8         x0      -
       blackfin    excpt 0x0             P0         R0      -
       i386        int $0x80             eax        eax     -
       ia64        break 0x100000        r15        r8      r10      [1]
       m68k        trap #0               d0         d0      -
       microblaze  brki r14,8            r12        r3      -
       mips        syscall               v0         v0      a3       [1]
       nios2       trap                  r2         r2      r7
       parisc      ble 0x100(%sr2, %r0)  r20        r28     -
       powerpc     sc                    r0         r3      r0       [1]
       s390        svc 0                 r1         r2      -        [3]
       s390x       svc 0                 r1         r2      -        [3]
       superh      trap #0x17            r3         r0      -        [4]
       sparc/32    t 0x10                g1         o0      psr/csr  [1]
       sparc/64    t 0x6d                g1         o0      psr/csr  [1]
       tile        swint1                R10        R00     R01      [1]
       x86-64      syscall               rax        rax     -        [5]
       x32         syscall               rax        rax     -        [5]

Theory3:
Return value of system calls
-----------------------------

All system calls return long

Positive or 0 value denotes a successful termination of the system call

Negative value denotes an error condition.
        The value is the negation of the error code that must be returned to the application program in the errno
        variable.

The errno variable is not set or used by the Linux Kernel.
Instead, the wrapper routines handle the task of setting this variable after a return from a system call.

Theory4:
syscall
-----------

syscall() is a small library function that invokes the system call
This is provided to use when invoking a system call that has no wrapper function in the C library.

syscall()
	saves CPU registers before making the system call
	restores the registers upon return from the system call
	and stores any error code returned by the system call in errno if an error occurs

#define _GNU_SOURCE         /* See feature_test_macros(7) */
#include <unistd.h>
#include <sys/syscall.h>   /* For SYS_xxx definitions */

long syscall(long number, ...);

$ vi glibc-2.30/sysdeps/unix/sysv/linux/x86_64/syscall.S

Theory5:
What happens when we use a system call number which is not implemented
=========================================================================

Non implemented system calls returns -ENOSYS

Theory6:
vDSO (Virtual Dynamic Shared Object)
======================================

What is vDSO?
==============

The  "vDSO" (virtual dynamic shared object) is a small shared library that the kernel automatically maps
into the address space of all user-space applications.

Why does the vDSO exist at all?
================================

communication between userspace applications and the kernel is through system calls.
Eg. fork(), vfork() etc

When a process invokes a system call:

1. it executes a special instruction forcing the CPU to switch to kernel mode
2. saves the contents of the registers on the kernel mode stack
3. starts the execution of a kernel function
4. When the system call has been serviced, the kernel restores the contents of the registers saved on the kernel mode stack
5. executes another special instruction to resume execution of the user-space process.

Numerous clock cycles are spent just to make these special kind of function calls.

Issue
=============

There are some system calls the kernel provides that user-space code ends up using frequently, to the point that such calls can dominate overall performance

Eg. gettimeofday()

	Performance is reduced due to 
	1. Frequency of the call
	2. Context-switch overhead that results from exiting user space and entering the kernel.

	Certain functions that do not write any data and merely return a value stored in the kernel, such as gettimeofday(), are relatively safe in nature.

	With vDSO, the kernel arranges for the required information to be placed in memory the process can access.

	Now a call to gettimeofday(2) changes from a system call to a normal function call and a few memory accesses

Theory7:
strace and vdso
==================

When tracing systems calls with strace, system calls that are exported by the vDSO will not appear in the trace output.

You can capture calls to system calls which have been implemented via the vDSO by using ltrace instead of strace.

Theory8:
ldd ./prog

linux-vdso.so.1 (0x00007ffce147a000)
libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6ef9e8e000)
/lib64/ld-linux-x86-64.so.2 (0x00007f6efa481000)

sudo find / -name 'linux-vdso.so*'

Will do not give any results. why ?

It's a virtual shared object that doesn't have any physical file on the disk

it's a part of the kernel that's exported into every program's address space when it's loaded.

----
?
    //look at /proc/pid/maps
    getchar();

Theory9:
vsyscalls
==============

The vsyscall or virtual system call is the first and oldest mechanism in the Linux kernel that is designed to accelerate execution of certain system calls. 

File: arch/x86/entry/vsyscall/vsyscall_emu_64.S 

System Calls:

    gettimeofday
    time
    getcpu

How it works
==============

The Linux kernel maps into user space a page that contains some variables and the implementation of some system calls.

$ cat /proc/self/maps | grep vsyscall

Limitations
=============

1. space only for 4 system calls
2. security:
    Type cat /proc/self/maps multiple times
    IMP: Note that the vDSO area gets changed every time, while the vsyscall page remains at the same location
    The location of the vsyscall page is nailed down in the kernel ABI, but the vDSO area is ASLR

Note: The security issue has been mitigated by emulating a virtual system call, but the emulation introduces additional latency.

vDSO is dynamically allocated, offers improved safety through memory space randomization, and supports more than 4 system calls. 

vDSO links are provided via the glibc library

If the kernel does not have vDSO support, a traditional syscall is made.
