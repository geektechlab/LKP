struct file
==============

Header File: <linux/fs.h>

struct file is different when compared to FILE of user space program.

A FILE is defined in the C library and never appears in kernel code.

A struct file, on the other hand, is a kernel structure that never appears in user programs.

The file structure represents an open file. (It is not specific to device drivers; every open file in the system has an associated struct file in kernel space.) Whenver you open a file, kernel creates a struct file in kernel space.

It is created by the kernel on open and is passed to any function that operates on the file, until the last close.

After all instances of the file are closed, the kernel releases the data structure.

An open file is different from a disk file, represented by struct inode.

Important Fields

struct file {
	//The file mode identifies the file as either readable or writable
	fmode_t                 f_mode;

	//The current reading or writing position. loff_t is a 64-bit value 
	loff_t f_pos;
	
	//These are the file flags, such as O_RDONLY, O_NONBLOCK, and O_SYNC.
	unsigned int            f_flags;

	//The operations associated with the file.
	struct file_operations *f_op;
	
	//The open system call sets this pointer to NULL before calling the open method for the driver.
	//The driver can use the field to point to allocated data, but then must free memory in the release method before the file structure is destroyed by the kernel
	// private_data is a useful resource for preserving state information across system calls
	void *private_data;
}; 
