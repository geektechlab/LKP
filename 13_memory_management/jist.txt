Theory0:
What is physical address space?
The entire range of memory addresses accessible by processors is often referred to as physical address space. 32 Bit systems can have address space of 2^32 = 4 GB. This Physical address space is used by
	--->	RAM
	--->	BIOS
	--->	APIC
	--->	PCI
	--->	Other Memory Mapped I/O Devices

+------------------+  <- 0xFFFFFFFF (4GB)
|      32-bit      |
|  memory mapped   |
|     devices      |
|                  |
/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\
|                  |
|      Unused      |
|                  |
+------------------+  <- depends on amount of RAM
|                  |
|                  |
| Extended Memory  |
|                  |
|                  |
+------------------+  <- 0x00100000 (1MB)
|     BIOS ROM     |
+------------------+  <- 0x000F0000 (960KB)
|  16-bit devices, |
|  expansion ROMs  |
+------------------+  <- 0x000C0000 (768KB)
|   VGA Display    |
+------------------+  <- 0x000A0000 (640KB)
|                  |
|    Low Memory    |
|                  |
+------------------+  <- 0x00000000

$ cat /proc/iomem
This file shows you the current map of the system's memory for each physical device.

Theory1:
Virtual Address Space for 32-bit processors:
On Linux, every memory address is virtual. They do not point to any address in the RAM directly. Whenever you access a memory location, a translation mechanism is performed in order to match the corresponding phyical memory. On Linux Systems, each process owns a virtual address space. Size of the virtual address space is 4GB on 32-bit systems (even on a system with physical memory less than 4 GB). Linux divides this virtual address space into:
	--->	an area for applications, called user space
	--->	an area for kernel, called kernel space/process space
The split between the two is set by a kernel configuration parameter named PAGE_OFFSET. This is called 3G/1G Split.
      .------------------------. 0xFFFFFFFF
      |                        | (4 GB)
      |    Kernel addresses    |
      |                        |
      |                        |
      .------------------------.CONFIG_PAGE_OFFSET
      |                        |(x86: 0xC0000000, ARM: 0x80000000)
      |                        |
      |                        |
      |  User space addresses  |
      |                        |
      |                        |
      |                        |
      |                        |
      '------------------------' 00000000
IMP: User address space is allocated per process, so that each process runs in a sandbox, separated from others.
IMP: The kernel address space is same for all process; there is only one kernel.

Why kernel shares its address space with every process:
	--> Every single process uses system calls, which will involve the kernel
	--> Mapping the kernel's virtual memory address into each process virtual address space allows us to avoid the cost of switching out the memory address space on each entry to and exit from the kernel

if one process updates golbal variable in kernel, then if second process comes and sees variable. Then it will see updated variable. 64- bit memory map:
===========================================================================================
    Start addr    |   Offset   |     End addr     |  Size   | VM area description
===========================================================================================
                  |            |                  |         |
 0000000000000000 |    0       | 00007fffffffffff |  128 TB | user-space virtual memory
__________________|____________|__________________|_________|______________________________
                  |            |                  |         |
 0000800000000000 | +128    TB | ffff7fffffffffff | ~16M TB | non-canonical ( what is this ? )
__________________|____________|__________________|_________|______________________________
                  |            |                  |         |
 ffff800000000000 | -128    TB | ffffffffffffffff |  128 TB | kernel-space virtual memory
__________________|____________|__________________|_________|______________________________

Documentation/x86/x86_64/mm.txt
how much RAM installed in machine ? [ free -m ] or /proc/meminfo
[ make menuconfig ] gives kernel configurations in QEMU.

Kinds of Memory:
Kernel and user space work with virtual addresses. These virtual addresses are mapped to physical addresses by memory management hardware (MMU).
Header File: #include <asm/io.h>
phys_addr = virt_to_phys(virt_addr);
virt_addr = phys_to_virt(phys_addr);
[ uname -a ] shows 64-bit / 32-bit machine type. i686=32-bit, x86_64=64-bit
buildroot generates linux images for lightweight targets. Yocto is for heavy weight.

Theory3:
Pages:
Virtual address space (0x00000000 to 0xffffffff) is divided into pages of 4096 bytes. The page size may differ in other systems. But on ARM and x86 it is fixed. The size of a page is defined in the kernel through the PAGE_SIZE macro. Pages in the virtual address space are mapped to physical addresses by the Memory Management Unit(MMU), which uses page tables to perform the mapping.

Memory Page/Virtual Page/Page:
	Refers to a fixed length contiguous block of virtual memory.
	Kernel data structure to represent a memory page is struct page.

Frame/Page Frame:
	Refers to a fixed length contiguous block of physical memory on top of which the OS maps a memory page.
	Each page frame is given a page frame number (PFN).
	Given a page, you can easily get its PFN and vice versa, using page_to_pfn/pfn_to_page macros.

Page Table:
	Kernel and architecture data structure used to store the mapping between virtual addresses and physical addresses.
	Each entry describes key pair page/frame.

Command to find out page size: $ getconf PAGESIZE or $ getconf PAGE_SIZE

Kernel represents every virtual page on the system with struct page structure.
Header File: <linux/mmtypes.h>
struct page {
        unsigned long flags;
	atomic_t      _count;
	void          *virtual;
	....
};

Flags: Status of the page: Dirty, locked in memory.
	Values: <linux/page-flags.h>
_count : Usage count of the page. How many references are to this page. When page is free _count is negative one
virtual: Page's virtual Address.

with 4KB Page Size and 4GB of Physical Memory = 1048576 Pages
Each page is taking 64 bytes = 1048576*64 = 64 MB is used to store all the physical pages

Theory4:
Kernel memory is managed in a fairly straightforward way. It is not demand-paged, meaning that, for every allocation using kmalloc() or similar function, there is real physical memory. Kernel memory is never discarded or paged out. Linux employs a lazy allocation strategy for user space, only mapping physical pages of memory when the program accesses it. For example, allocating a buffer of 1 MiB using malloc(3) returns a pointer to a block of memory addresses but no actual physical memory. A flag is set in the page table entries such that any read or write access is trapped by the kernel. This is known as a page fault. Only at this point does the kernel attempt to find a page of physical memory and add it to the page table mapping for the process.

See example 4 to check page fault.

A page fault is generated when the kernel traps an access to a page that has not been mapped. In fact, there are two kinds of page fault: minor and major. With a minor fault, the kernel just has to find a page of physical memory and map it into the process address space. A major page fault occurs when the virtual memory is mapped to a file, for example using mmap(2). Major faults are much more expensive in time and system resources. Here, program pagefault diffrence is 256 for 1kb request and 1024 for 4kb.

Theory5:
User space virtual address space:
 		 address|-------------------| command-line arguments
   				|-------------------| and environment variables
				|        stack      |
				|-------------------|
				|	                |
				|		            |
				|		            |
				|-------------------|
				|		heap        |
				|-------------------|
				|uninitialized data | initialized to
				|		        (bss| zero by exec
				|-------------------|
				| initialized data  | read from
				|-------------------| program file
				|		text        | by exec
	low address |-------------------|
			Typical memory arrangement

we can check it using [ $ cat /proc/pid/maps ]
[ cat /proc/self/maps ] gives address space for current process bash.

Theory6:
Low and High Memory:
The Linux kernel has its own virtual address space, as every user mode process does. The kernel code and data structures must fit into that space, but the biggest consumer of kernel address space is virtual mappings for physical memory. The kernel to access physical memory should first map it into the kernel's virtual address space.

Maximum amount of physical memory handled by the kernel = amount that could be mapped into the kernel's portion of virtual address space - Space used by kernel code.

As, a result x86 based Linux systems could work with a maximum of a little under 1 GB of physical memory. The virtual address space of the kernel (1 GB sized in a 3G/1G split) is divided into two parts:
	-->	Low memory or LOWMEM, which is the first 896 MB
	-->	High memory or HIGHMEM, represented by the top 128 MB

                                           Physical mem
       Process address space    +------> +------------+
                                |        |  3200 M    |
                                |        |            |
    4 GB+---------------+ <-----+        |  HIGH MEM  |
        |     128 MB    |                |            |
        +---------------+ <---------+    |            |
        +---------------+ <------+  |    |            |
        |     896 MB    |        |  +--> +------------+
    3 GB+---------------+ <--+   +-----> +------------+
        |               |    |           |   896 MB   | LOW MEM
        |     /////     |    +---------> +------------+
        |               |
    0 GB +---------------+

Theory7:
Low Mem:
The first 896 MB of kernel address space constitutes the low memory region. Early in the boot, the kernel permanently maps this 896MB. Addresses that result from this mapping are called logical addresses. These are virtual addresses, but can be translated into physical addresses by subtracting a fixed offset, since the mapping is permanent and known in advance. You can convert a physical address into a logical address using the __pa(address) macro, and then revert it with the __va(address) macro. Low memory matches with the lower bound of physical addresses. In fact, to serve different purposes, kernel memory is divided into a zone. We can then identify three different memory zones in the kernel space:
	ZONE_DMA: This contains page frames of memory below 16 MB, reserved for Direct Memory Access (DMA)
	ZONE_NORMAL: This contains page frames of memory above 16 MB and below 896 MB, for normal use
	ZONE_HIGHMEM: This contains page frames of memory at and above 896 MB

On a 512 MB system, there will be no ZONE_HIGHMEM, 16 MB for ZONE_DMA, and 496 MB for ZONE_NORMAL. [ check it on QEMU, shown in video 43:00 ]

Theory8:
High Memory:
The top 128 MB of the kernel address space is called the high memory region. It is used by the kernel to temporarily map physical memory above 1 GB. When physical memory above 1GB (or more precisely 896MB) needs to be accessed, the kernel uses those 128MB to create a temporary mapping to its virtual address space, thus achieving the goal of being able to access all physical pages. The physical memory above 896 MB is mapped on demand to the 128 MB of the HIGHMEM region. Mapping to access high memory is created on the fly by the kernel, and destroyed when done. This makes high memory access slower. Concept of high memory does not exist on 64-bit systems, due to the huge address range (2^64), where the 3G/1G split does not make sense anymore. High memeory concep is required only because of 4GB restriction.

Theory9:
Memory allocation mechanism
==============================

    ----------------------------------
    |   Kernel                       |
    |   Module                       |
    ----------------------------------
        |           |   |       |
        v           |   |       v
    ----------      |   |   -----------
    |         |     |   |   |         |
    |kmalloc  |     |   |   |vmalloc  |
    |allocator|     |   |   |allocator|
    ----------      |   |   -----------
       |            |   |
       v            v   |
    -----------------   |
    | slab          |   |
    | allocator     |   |
    ----------------    |
        |               |
        v               v
    ------------------------------------------
    |   Page Allocator                       |
    |Allocate physical memory by chunk of 4k |
    ------------------------------------------
            |
            |
            v
    ---------------------------------------
    |   Main Memory                       |
    |                                     |
    ---------------------------------------

There is an allocation mechanism to satisfy any kind of memory request. Depending on what you need memory for, you can choose the one closest to your goal. The main allocator is the page allocator, which only works with pages (a page being the smallest memory unit it can deliver). Then comes the SLAB allocator which is built on top of the page allocator, getting pages from it and returning smaller memory entities (by mean of slabs and caches). This is the allocator on which the kmalloc allocator relies. [ cat /proc/slabinfo ] gives info about slab.

Theory10:
kmalloc family allocation:
kmalloc is a kernel memory allocation function, such as malloc() in user space. Memory returned by kmalloc is contiguous in physical memory and in virtual memory:

                    virtual memory    physical memory
                    ----------        --------
               - - -|        |------- |      |
    kmalloc   /     |        |        |      |
    ---------/      |        |        |      |
    |       |       |        |        |      |
    |       |   --- |        |------- |      |
    |       |  /    |        |        |      |
    |       | /     |        |        |      |
    ---------/      |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    |        |        |      |
                    ----------        --------

kmalloc allocator is the general and higher-level memory allocator in the kernel, and relies on SLAB Allocator. Memory returned from kmalloc has a kernel logical address because it is allocated from the LOW_MEM region, unless HIGH_MEM is specified.
Header File: #include <linux/slab.h>
void *kmalloc(size_t size, int flags); 
    size: specifies the size of the memory to be allocated (in bytes).
    flags: determines how and where memory should be allocated. 
        Available flags are the same as the page allocator (GFP_KERNEL, GFP_ATOMIC, GFP_DMA, and so on)
Return Value: On Success, returns the virtual address of the chunk allocated, which is guaranteed to be physically contiguous.  On error, it returns NULL

Flags:
	GFP_KERNEL: This is the standard flag. We cannot use this flag in the interrupt handler because its code may sleep. It always returns memory from the LOM_MEM zone (hence a logical address).
	GFP_ATOMIC: This guarantees the atomicity of the allocation. The only flag to use when we are in the interrupt context.
	GFP_USER: This allocates memory to a user space process. Memory is then distinct and separated from that allocated to the kernel.
	GFP_HIGHUSER: This allocates memory from the HIGH_MEMORY zone.
	GFP_DMA: This allocates memory from DMA_ZONE.

kfree:
The kfree function is used to free the memory allocated by kmalloc.
void kfree(const void *ptr) 
Memory corruption can happen:
    --->    on a block of memory that already has been freed
    --->    on a pointer that is not an address returned from kmalloc()
Always balance allocations and frees to ensure that kfree() is called exactly once on the correct pointer
